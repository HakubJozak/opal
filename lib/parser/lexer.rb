# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source_buffer.slice(@ts...@te)
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 26, 0, 
	127, 58, 58, 58, 58, 
	0, 127, 58, 58, 60, 60, 
	62, 62, 10, 10, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	107, 107, 117, 117, 100, 
	100, 115, 115, 99, 99, 
	117, 117, 101, 101, 108, 116, 
	101, 101, 115, 115, 115, 
	115, 105, 105, 108, 108, 
	105, 105, 108, 108, 58, 58, 
	0, 127, 10, 10, 0, 
	127, 58, 58, 98, 98, 
	101, 101, 103, 103, 105, 105, 
	110, 110, 0, 122, 61, 
	61, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 127, 
	93, 93, 0, 127, 0, 
	127, 10, 10, 10, 34, 
	10, 10, 10, 39, 0, 127, 
	10, 96, 0, 45, 0, 
	77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 
	99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	58, 58, 58, 58, 0, 127, 
	43, 57, 48, 57, 48, 
	57, 48, 57, 48, 57, 
	0, 127, 58, 58, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 9, 92, 
	60, 60, 10, 10, 9, 46, 
	46, 46, 0, 95, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 98, 98, 9, 32, 
	10, 10, 95, 95, 0, 
	92, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 120, 
	0, 0, 0, 0, 48, 
	55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 
	92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 10, 
	0, 92, 0, 123, 0, 
	26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 102, 
	0, 102, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 48, 102, 0, 
	0, 0, 92, 36, 123, 
	0, 127, 48, 57, 0, 120, 
	0, 0, 0, 0, 48, 
	55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 
	92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 10, 
	0, 92, 0, 123, 0, 
	26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 102, 
	0, 102, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 48, 102, 0, 
	0, 0, 92, 9, 32, 
	0, 26, 0, 92, 0, 26, 
	0, 35, 36, 123, 0, 
	127, 48, 57, 0, 26, 
	0, 35, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 
	32, 9, 32, 65, 122, 
	65, 122, 36, 64, 0, 127, 
	48, 57, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	9, 32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 
	127, 0, 127, 48, 57, 
	115, 115, 38, 38, 42, 42, 
	64, 64, 58, 58, 60, 
	61, 62, 62, 61, 126, 
	61, 61, 61, 62, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 93, 93, 10, 10, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	124, 124, 0, 127, 0, 
	127, 9, 32, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 9, 32, 
	0, 0, 61, 126, 10, 10, 
	10, 10, 38, 38, 42, 
	42, 64, 64, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 93, 
	93, 10, 10, 124, 124, 
	0, 126, 0, 127, 0, 61, 
	9, 61, 9, 61, 0, 
	0, 9, 61, 9, 62, 
	46, 46, 46, 46, 58, 58, 
	9, 32, 0, 0, 0, 
	127, 0, 0, 9, 124, 
	0, 0, 10, 10, 10, 10, 
	0, 0, 9, 61, 58, 
	58, 60, 60, 62, 62, 
	9, 32, 10, 10, 0, 127, 
	102, 102, 111, 111, 101, 
	101, 110, 110, 104, 104, 
	0, 127, 0, 127, 0, 127, 
	0, 0, 0, 127, 10, 
	10, 0, 123, 9, 32, 
	10, 10, 10, 10, 10, 10, 
	0, 0, 111, 111, 0, 
	0, 0, 127, 0, 127, 
	9, 32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 58, 61, 0, 
	0, 61, 126, 61, 61, 
	0, 0, 0, 0, 0, 0, 
	9, 32, 61, 61, 9, 
	32, 61, 126, 10, 10, 
	10, 10, 65, 122, 0, 122, 
	38, 61, 0, 0, 42, 
	61, 61, 61, 48, 61, 
	48, 62, 46, 46, 46, 46, 
	0, 26, 0, 127, 0, 
	127, 61, 61, 0, 0, 
	61, 126, 61, 62, 0, 0, 
	0, 0, 0, 0, 0, 
	0, 61, 126, 0, 127, 
	48, 57, 38, 38, 42, 42, 
	64, 64, 60, 61, 62, 
	62, 61, 61, 61, 62, 
	124, 124, 60, 61, 0, 0, 
	62, 62, 61, 126, 61, 
	62, 0, 122, 0, 0, 
	0, 127, 0, 127, 0, 120, 
	0, 0, 0, 0, 48, 
	55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 92, 
	0, 45, 0, 92, 0, 
	92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 10, 
	0, 92, 0, 123, 0, 
	26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 102, 
	0, 102, 0, 0, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 0, 0, 0, 
	48, 102, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 61, 126, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 0, 61, 
	124, 0, 92, 9, 32, 
	0, 0, 10, 10, 10, 10, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 9, 32, 
	0, 0, 10, 10, 10, 10, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 61, 61, 
	0, 0, 9, 32, 0, 0, 
	61, 126, 10, 10, 10, 
	10, 0, 127, 0, 127, 
	48, 57, 61, 61, 38, 61, 
	0, 0, 0, 0, 42, 
	61, 61, 62, 46, 57, 
	46, 46, 48, 101, 48, 95, 
	46, 120, 48, 114, 43, 
	57, 48, 105, 0, 0, 
	105, 105, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 105, 114, 0, 0, 
	105, 105, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 48, 114, 46, 114, 
	48, 114, 46, 114, 48, 
	114, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 0, 
	127, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 
	92, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 0, 
	61, 124, 0, 0, 9, 46, 
	9, 46, 46, 46, 10, 
	61, 10, 10, 10, 101, 
	10, 110, 10, 100, 10, 10, 
	0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 27, 128, 1, 1, 
	128, 1, 1, 1, 1, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 1, 1, 1, 1, 
	1, 1, 9, 1, 1, 1, 1, 1, 
	1, 1, 1, 128, 1, 128, 1, 1, 
	1, 1, 1, 1, 123, 1, 128, 128, 
	66, 128, 128, 1, 128, 128, 1, 25, 
	1, 30, 128, 87, 46, 78, 78, 93, 
	27, 27, 46, 100, 27, 33, 1, 93, 
	78, 103, 128, 128, 128, 128, 128, 128, 
	1, 1, 128, 15, 10, 10, 10, 10, 
	128, 1, 84, 84, 84, 84, 84, 84, 
	1, 1, 38, 1, 96, 24, 0, 1, 
	1, 1, 24, 1, 1, 93, 24, 88, 
	128, 10, 121, 0, 0, 8, 8, 0, 
	0, 93, 0, 0, 0, 93, 1, 0, 
	0, 0, 93, 46, 93, 93, 0, 0, 
	93, 46, 1, 93, 124, 27, 27, 27, 
	0, 103, 103, 103, 0, 126, 126, 126, 
	126, 126, 0, 126, 126, 0, 126, 27, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 0, 126, 0, 55, 0, 93, 88, 
	128, 10, 121, 0, 0, 8, 8, 0, 
	0, 93, 0, 0, 0, 93, 1, 0, 
	0, 0, 93, 46, 93, 93, 0, 0, 
	93, 46, 1, 93, 124, 27, 27, 27, 
	0, 103, 103, 103, 0, 126, 126, 126, 
	126, 126, 0, 126, 126, 0, 126, 27, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 0, 126, 0, 55, 0, 93, 24, 
	27, 93, 27, 36, 88, 128, 10, 27, 
	36, 24, 88, 128, 10, 33, 24, 58, 
	58, 29, 128, 10, 128, 128, 128, 128, 
	24, 0, 66, 1, 1, 128, 128, 10, 
	1, 1, 1, 1, 1, 2, 1, 66, 
	1, 2, 128, 128, 128, 128, 128, 128, 
	128, 1, 1, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 1, 128, 128, 24, 1, 
	1, 1, 0, 128, 128, 1, 0, 24, 
	0, 66, 1, 1, 1, 1, 1, 2, 
	1, 66, 1, 2, 128, 1, 1, 1, 
	127, 128, 62, 53, 53, 0, 53, 54, 
	1, 1, 1, 24, 0, 128, 0, 116, 
	0, 1, 1, 0, 53, 1, 1, 1, 
	24, 1, 128, 1, 1, 1, 1, 1, 
	128, 128, 128, 0, 128, 1, 124, 24, 
	1, 1, 1, 0, 1, 0, 128, 128, 
	24, 0, 1, 1, 1, 0, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 4, 0, 66, 1, 
	0, 0, 0, 24, 1, 24, 66, 1, 
	1, 58, 123, 24, 0, 20, 1, 14, 
	15, 1, 1, 27, 128, 128, 1, 0, 
	66, 2, 0, 0, 0, 0, 66, 128, 
	10, 1, 1, 1, 2, 1, 1, 2, 
	1, 2, 0, 1, 66, 2, 123, 0, 
	128, 128, 121, 0, 0, 8, 8, 0, 
	0, 93, 0, 0, 0, 93, 1, 0, 
	0, 0, 93, 46, 93, 93, 0, 0, 
	93, 46, 1, 93, 124, 27, 27, 27, 
	0, 103, 103, 103, 0, 126, 126, 126, 
	126, 126, 0, 126, 126, 0, 126, 27, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 0, 0, 
	55, 0, 128, 128, 128, 0, 1, 0, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 66, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 0, 64, 93, 24, 
	0, 1, 1, 1, 0, 128, 128, 24, 
	0, 1, 1, 1, 0, 128, 128, 1, 
	0, 24, 0, 66, 1, 1, 128, 128, 
	10, 1, 24, 0, 0, 20, 2, 12, 
	1, 54, 48, 75, 67, 15, 58, 0, 
	1, 0, 67, 67, 67, 67, 10, 0, 
	1, 0, 67, 67, 67, 67, 67, 67, 
	67, 67, 69, 67, 69, 67, 1, 2, 
	1, 66, 1, 2, 128, 128, 0, 128, 
	128, 128, 128, 128, 128, 0, 1, 0, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 84, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 0, 
	64, 0, 38, 38, 1, 52, 1, 92, 
	101, 91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 
	3927, 4056, 4185, 4314, 4443, 4471, 4600, 4602, 
	4604, 4733, 4735, 4737, 4739, 4741, 4870, 4999, 
	5128, 5257, 5386, 5515, 5644, 5773, 5902, 6031, 
	6160, 6289, 6418, 6547, 6676, 6805, 6934, 7063, 
	7192, 7321, 7450, 7579, 7581, 7583, 7585, 7587, 
	7589, 7591, 7593, 7603, 7605, 7607, 7609, 7611, 
	7613, 7615, 7617, 7619, 7748, 7750, 7879, 7881, 
	7883, 7885, 7887, 7889, 7891, 8015, 8017, 8146, 
	8275, 8342, 8471, 8600, 8602, 8731, 8860, 8862, 
	8888, 8890, 8921, 9050, 9138, 9185, 9264, 9343, 
	9437, 9465, 9493, 9540, 9641, 9669, 9703, 9705, 
	9799, 9878, 9982, 10111, 10240, 10369, 10498, 10627, 
	10756, 10758, 10760, 10889, 10905, 10916, 10927, 10938, 
	10949, 11078, 11080, 11165, 11250, 11335, 11420, 11505, 
	11590, 11592, 11594, 11633, 11635, 11732, 11757, 11758, 
	11760, 11762, 11764, 11789, 11791, 11793, 11887, 11912, 
	12001, 12130, 12141, 12263, 12264, 12265, 12274, 12283, 
	12284, 12285, 12379, 12380, 12381, 12382, 12476, 12478, 
	12479, 12480, 12481, 12575, 12622, 12716, 12810, 12811, 
	12812, 12906, 12953, 12955, 13049, 13174, 13202, 13230, 
	13258, 13259, 13363, 13467, 13571, 13572, 13699, 13826, 
	13953, 14080, 14207, 14208, 14335, 14462, 14463, 14590, 
	14618, 14745, 14872, 14999, 15126, 15253, 15380, 15507, 
	15634, 15761, 15762, 15889, 15890, 15946, 15947, 16041, 
	16130, 16259, 16270, 16392, 16393, 16394, 16403, 16412, 
	16413, 16414, 16508, 16509, 16510, 16511, 16605, 16607, 
	16608, 16609, 16610, 16704, 16751, 16845, 16939, 16940, 
	16941, 17035, 17082, 17084, 17178, 17303, 17331, 17359, 
	17387, 17388, 17492, 17596, 17700, 17701, 17828, 17955, 
	18082, 18209, 18336, 18337, 18464, 18591, 18592, 18719, 
	18747, 18874, 19001, 19128, 19255, 19382, 19509, 19636, 
	19763, 19890, 19891, 20018, 20019, 20075, 20076, 20170, 
	20195, 20223, 20317, 20345, 20382, 20471, 20600, 20611, 
	20639, 20676, 20701, 20790, 20919, 20930, 20964, 20989, 
	21048, 21107, 21137, 21266, 21277, 21406, 21535, 21664, 
	21793, 21818, 21819, 21886, 21888, 21890, 22019, 22148, 
	22159, 22161, 22163, 22165, 22167, 22169, 22172, 22174, 
	22241, 22243, 22246, 22375, 22504, 22633, 22762, 22891, 
	23020, 23149, 23151, 23153, 23282, 23411, 23540, 23669, 
	23798, 23927, 24056, 24185, 24314, 24443, 24572, 24701, 
	24830, 24959, 25088, 25217, 25346, 25475, 25604, 25733, 
	25862, 25991, 26120, 26249, 26378, 26507, 26636, 26765, 
	26894, 27023, 27152, 27281, 27410, 27539, 27668, 27797, 
	27926, 28055, 28184, 28313, 28442, 28571, 28700, 28829, 
	28958, 29087, 29216, 29345, 29474, 29603, 29732, 29861, 
	29990, 30119, 30248, 30377, 30506, 30635, 30764, 30893, 
	31022, 31151, 31280, 31409, 31538, 31667, 31796, 31925, 
	32054, 32183, 32312, 32441, 32570, 32699, 32828, 32957, 
	33086, 33215, 33344, 33473, 33602, 33731, 33860, 33989, 
	34118, 34247, 34376, 34505, 34634, 34763, 34892, 35021, 
	35150, 35279, 35408, 35537, 35539, 35668, 35797, 35822, 
	35824, 35826, 35828, 35829, 35958, 36087, 36089, 36090, 
	36115, 36116, 36183, 36185, 36187, 36189, 36191, 36193, 
	36196, 36198, 36265, 36267, 36270, 36399, 36401, 36403, 
	36405, 36533, 36662, 36725, 36779, 36833, 36834, 36888, 
	36943, 36945, 36947, 36949, 36974, 36975, 37104, 37105, 
	37222, 37223, 37225, 37227, 37228, 37282, 37284, 37286, 
	37288, 37313, 37315, 37444, 37446, 37448, 37450, 37452, 
	37454, 37583, 37712, 37841, 37842, 37971, 37973, 38098, 
	38123, 38125, 38127, 38129, 38130, 38132, 38133, 38262, 
	38391, 38416, 38417, 38419, 38421, 38423, 38424, 38553, 
	38682, 38811, 38940, 39069, 39198, 39327, 39456, 39585, 
	39714, 39843, 39972, 40101, 40230, 40359, 40488, 40617, 
	40746, 40875, 41004, 41133, 41262, 41267, 41268, 41335, 
	41337, 41338, 41339, 41340, 41365, 41367, 41392, 41459, 
	41461, 41463, 41522, 41646, 41671, 41672, 41693, 41695, 
	41710, 41726, 41728, 41730, 41758, 41887, 42016, 42018, 
	42019, 42086, 42089, 42090, 42091, 42092, 42093, 42160, 
	42289, 42300, 42302, 42304, 42306, 42309, 42311, 42313, 
	42316, 42318, 42321, 42322, 42324, 42391, 42394, 42518, 
	42519, 42648, 42777, 42899, 42900, 42901, 42910, 42919, 
	42920, 42921, 43015, 43016, 43017, 43018, 43112, 43114, 
	43115, 43116, 43117, 43211, 43258, 43352, 43446, 43447, 
	43448, 43542, 43589, 43591, 43685, 43810, 43838, 43866, 
	43894, 43895, 43999, 44103, 44207, 44208, 44335, 44462, 
	44589, 44716, 44843, 44844, 44971, 45098, 45099, 45226, 
	45254, 45381, 45508, 45635, 45762, 45889, 46016, 46143, 
	46270, 46397, 46524, 46651, 46778, 46905, 47032, 47033, 
	47034, 47090, 47091, 47220, 47349, 47478, 47479, 47481, 
	47482, 47611, 47740, 47869, 47998, 48127, 48256, 48385, 
	48514, 48643, 48772, 48901, 49030, 49159, 49288, 49417, 
	49546, 49675, 49804, 49933, 50062, 50191, 50320, 50449, 
	50578, 50707, 50836, 50965, 51094, 51223, 51352, 51481, 
	51610, 51739, 51868, 51997, 52126, 52255, 52384, 52513, 
	52642, 52771, 52900, 53029, 53158, 53287, 53416, 53545, 
	53674, 53803, 53932, 54061, 54190, 54319, 54448, 54577, 
	54706, 54835, 54964, 55093, 55222, 55351, 55480, 55609, 
	55738, 55867, 55996, 56125, 56254, 56383, 56512, 56641, 
	56770, 56899, 57028, 57095, 57224, 57353, 57482, 57611, 
	57740, 57869, 57998, 58127, 58256, 58385, 58514, 58643, 
	58772, 58901, 59030, 59159, 59288, 59417, 59546, 59675, 
	59804, 59933, 60062, 60191, 60320, 60321, 60386, 60480, 
	60505, 60506, 60508, 60510, 60512, 60513, 60642, 60771, 
	60796, 60797, 60799, 60801, 60803, 60804, 60933, 61062, 
	61064, 61065, 61090, 61091, 61158, 61160, 61162, 61291, 
	61420, 61431, 61433, 61458, 61459, 61460, 61481, 61484, 
	61497, 61499, 61554, 61603, 61679, 61747, 61763, 61822, 
	61823, 61825, 61826, 61894, 61962, 62030, 62098, 62109, 
	62110, 62112, 62113, 62181, 62249, 62317, 62385, 62453, 
	62521, 62589, 62657, 62727, 62795, 62865, 62933, 62935, 
	62938, 62940, 63007, 63009, 63012, 63141, 63270, 63271, 
	63400, 63529, 63658, 63787, 63916, 64045, 64046, 64048, 
	64049, 64178, 64307, 64436, 64565, 64694, 64823, 64952, 
	65081, 65210, 65339, 65468, 65597, 65726, 65855, 65984, 
	66113, 66242, 66371, 66500, 66629, 66758, 66887, 67016, 
	67145, 67274, 67403, 67532, 67661, 67790, 67919, 68048, 
	68177, 68306, 68435, 68564, 68693, 68822, 68907, 69036, 
	69165, 69294, 69423, 69552, 69681, 69810, 69939, 70068, 
	70197, 70326, 70455, 70584, 70713, 70842, 70971, 71100, 
	71229, 71358, 71487, 71616, 71745, 71874, 72003, 72132, 
	72261, 72390, 72519, 72648, 72777, 72906, 73035, 73164, 
	73293, 73422, 73551, 73680, 73809, 73938, 74067, 74196, 
	74325, 74454, 74583, 74712, 74841, 74970, 75099, 75228, 
	75357, 75486, 75615, 75744, 75873, 76002, 76131, 76260, 
	76389, 76518, 76647, 76776, 76905, 77034, 77163, 77292, 
	77421, 77550, 77679, 77808, 77937, 78066, 78195, 78324, 
	78453, 78582, 78711, 78840, 78969, 79098, 79227, 79356, 
	79357, 79422, 79423, 79462, 79501, 79503, 79556, 79558, 
	79651, 79753, 79845
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 74, 76, 74, 76, 76, 74, 74, 
	76, 76, 76, 77, 76, 76, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 76, 74, 74, 75, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 74, 74, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 74, 74, 74, 74, 74, 74, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 76, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 74, 76, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 74, 74, 74, 74, 74, 74, 
	79, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 75, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	74, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	75, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	74, 75, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 80, 82, 80, 
	82, 82, 80, 80, 82, 82, 82, 83, 
	82, 82, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 82, 80, 
	80, 81, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 80, 80, 80, 
	82, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 80, 80, 80, 
	80, 80, 80, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 82, 80, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 80, 80, 
	80, 80, 80, 82, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 80, 80, 
	80, 80, 80, 80, 85, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 81, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 81, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 80, 
	80, 80, 80, 80, 80, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 81, 80, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	80, 80, 80, 80, 80, 81, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 88, 87, 88, 87, 87, 88, 88, 
	87, 87, 87, 89, 87, 87, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	87, 87, 87, 87, 87, 87, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 87, 88, 88, 86, 87, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 88, 88, 88, 87, 88, 86, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 88, 88, 88, 88, 88, 88, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 87, 88, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 88, 88, 88, 88, 88, 87, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 88, 88, 88, 88, 88, 88, 
	92, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 91, 
	88, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 88, 88, 88, 88, 88, 
	91, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 88, 88, 88, 88, 88, 
	88, 88, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 88, 88, 88, 88, 
	93, 88, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 88, 88, 88, 88, 
	88, 93, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 94, 94, 94, 94, 
	94, 94, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 95, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 94, 95, 96, 97, 97, 97, 96, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 96, 97, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	100, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 101, 98, 98, 98, 98, 100, 98, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 98, 98, 98, 98, 99, 98, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 98, 98, 98, 98, 98, 99, 
	101, 98, 98, 102, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 105, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 106, 103, 
	103, 103, 103, 105, 103, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 104, 103, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 103, 
	103, 103, 103, 103, 104, 106, 103, 108, 
	107, 109, 107, 110, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 112, 107, 
	112, 112, 112, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 112, 107, 107, 
	107, 107, 113, 114, 107, 115, 107, 116, 
	117, 118, 119, 120, 113, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 121, 
	107, 122, 118, 123, 124, 107, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	125, 126, 118, 127, 111, 107, 111, 111, 
	111, 111, 111, 111, 111, 111, 128, 111, 
	111, 111, 111, 111, 111, 129, 111, 130, 
	111, 111, 131, 111, 132, 111, 111, 111, 
	133, 134, 107, 127, 107, 111, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 135, 
	107, 135, 135, 135, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 135, 107, 
	107, 107, 107, 136, 137, 107, 138, 107, 
	139, 140, 141, 142, 143, 136, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	144, 107, 145, 141, 146, 147, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 148, 149, 141, 109, 104, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 150, 
	104, 104, 104, 104, 104, 104, 151, 104, 
	152, 104, 104, 153, 104, 154, 104, 104, 
	104, 155, 156, 107, 109, 107, 104, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	105, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 106, 107, 107, 107, 107, 105, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 104, 107, 
	104, 104, 104, 104, 104, 157, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 107, 104, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 105, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 106, 107, 107, 107, 107, 105, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 104, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 158, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 107, 
	104, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 105, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 106, 107, 107, 107, 107, 
	105, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	104, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 159, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	107, 104, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 105, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 106, 107, 107, 107, 
	107, 105, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 104, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 160, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 107, 104, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 105, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 106, 107, 107, 
	107, 107, 105, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 104, 107, 104, 104, 104, 157, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 107, 104, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 105, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 106, 107, 
	107, 107, 107, 105, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 104, 107, 104, 104, 104, 
	104, 161, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 107, 104, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 105, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 106, 
	107, 107, 107, 107, 105, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 104, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	162, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 107, 104, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 105, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	106, 107, 107, 107, 107, 105, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 104, 107, 104, 
	104, 163, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 107, 104, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	105, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 106, 107, 107, 107, 107, 105, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 104, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 164, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 107, 104, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 105, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 106, 107, 107, 107, 107, 105, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 104, 
	107, 104, 104, 104, 104, 157, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 107, 
	104, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 105, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 106, 107, 107, 107, 107, 
	105, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	104, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 165, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	107, 104, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 105, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 106, 107, 107, 107, 
	107, 105, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 104, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 166, 104, 
	104, 104, 104, 104, 104, 104, 167, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 107, 104, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 105, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 106, 107, 107, 
	107, 107, 105, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 104, 107, 104, 104, 104, 104, 
	168, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 107, 107, 
	107, 107, 107, 104, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 105, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 106, 107, 
	107, 107, 107, 105, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 104, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 169, 
	104, 104, 104, 104, 104, 104, 104, 107, 
	107, 107, 107, 107, 104, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 105, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 106, 
	107, 107, 107, 107, 105, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 104, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	157, 104, 104, 104, 104, 104, 104, 104, 
	107, 107, 107, 107, 107, 104, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 105, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	106, 107, 107, 107, 107, 105, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 104, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 170, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 107, 107, 107, 107, 107, 104, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	105, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 106, 107, 107, 107, 107, 105, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 104, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 157, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 107, 107, 107, 107, 107, 104, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 105, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 106, 107, 107, 107, 107, 105, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 104, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	171, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 107, 107, 107, 107, 107, 
	104, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 105, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 106, 107, 107, 107, 107, 
	105, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	104, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 172, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 107, 107, 107, 107, 
	107, 104, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 107, 105, 107, 107, 107, 107, 
	107, 107, 107, 107, 107, 107, 107, 107, 
	107, 107, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 106, 107, 107, 107, 
	107, 105, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 104, 107, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 164, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 107, 107, 107, 
	107, 107, 104, 174, 173, 175, 173, 141, 
	173, 176, 173, 177, 173, 178, 173, 141, 
	173, 179, 173, 173, 173, 173, 173, 173, 
	173, 180, 173, 181, 173, 182, 173, 141, 
	173, 183, 173, 141, 173, 184, 173, 178, 
	173, 186, 185, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 189, 187, 189, 189, 
	189, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 189, 187, 187, 187, 187, 
	187, 187, 187, 190, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 187, 191, 
	187, 187, 188, 187, 188, 188, 188, 192, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 187, 187, 
	187, 187, 187, 188, 193, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 195, 
	187, 195, 195, 195, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 195, 187, 
	187, 187, 187, 187, 187, 187, 196, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 187, 197, 187, 187, 194, 187, 194, 
	194, 194, 198, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	194, 187, 187, 187, 187, 187, 194, 199, 
	200, 202, 201, 203, 201, 204, 201, 205, 
	201, 206, 201, 207, 208, 208, 208, 207, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 207, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 208, 208, 
	208, 208, 208, 208, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 208, 210, 
	199, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 213, 213, 211, 213, 211, 213, 
	213, 211, 211, 213, 213, 213, 214, 213, 
	213, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 213, 213, 213, 213, 213, 
	213, 213, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 211, 213, 211, 211, 
	212, 213, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 211, 211, 211, 213, 
	211, 212, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 211, 211, 211, 211, 
	211, 211, 211, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 211, 211, 211, 
	211, 213, 211, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 211, 211, 211, 
	211, 211, 213, 216, 213, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 213, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 217, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 211, 211, 211, 211, 212, 211, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 211, 211, 211, 211, 211, 212, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 211, 211, 211, 211, 212, 211, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 211, 211, 211, 211, 211, 212, 
	216, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 219, 211, 211, 211, 
	211, 220, 211, 211, 211, 211, 211, 221, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 210, 
	211, 211, 211, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 211, 211, 211, 
	211, 218, 222, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 211, 211, 211, 
	221, 211, 218, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 225, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 224, 224, 224, 224, 224, 
	224, 224, 224, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 224, 224, 224, 
	224, 224, 224, 224, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 224, 224, 
	224, 224, 223, 224, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 224, 224, 
	224, 224, 224, 223, 227, 226, 211, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 219, 219, 
	219, 219, 219, 219, 219, 219, 228, 219, 
	225, 224, 211, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 228, 
	220, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 219, 211, 211, 211, 211, 
	220, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 211, 211, 211, 211, 
	218, 222, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 218, 218, 218, 218, 
	218, 218, 218, 218, 211, 211, 211, 211, 
	211, 218, 211, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	222, 222, 222, 222, 222, 222, 222, 222, 
	228, 222, 229, 230, 230, 230, 229, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 229, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 231, 
	230, 229, 232, 232, 232, 229, 232, 232, 
	232, 232, 232, 233, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 229, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 234, 232, 
	229, 232, 232, 232, 229, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 229, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 235, 232, 229, 
	236, 236, 236, 229, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 229, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 237, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 238, 236, 229, 239, 239, 
	239, 229, 239, 239, 239, 239, 239, 240, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 229, 
	239, 229, 239, 239, 239, 229, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 239, 239, 239, 239, 239, 
	239, 239, 239, 229, 239, 229, 230, 230, 
	230, 229, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 229, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 241, 230, 229, 242, 242, 242, 
	229, 242, 242, 242, 242, 242, 243, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 229, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 244, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	245, 242, 242, 242, 242, 242, 242, 246, 
	242, 229, 242, 242, 242, 229, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 242, 242, 242, 242, 242, 
	242, 242, 242, 229, 242, 247, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 229, 229, 229, 
	229, 229, 229, 229, 229, 248, 229, 248, 
	229, 229, 249, 249, 249, 229, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 229, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	250, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 251, 249, 229, 
	232, 232, 232, 229, 232, 232, 232, 232, 
	232, 233, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 229, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 235, 232, 229, 252, 
	252, 252, 229, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	229, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 253, 253, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	252, 252, 252, 252, 252, 252, 252, 253, 
	253, 253, 253, 253, 253, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 253, 
	253, 253, 253, 253, 253, 252, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 255, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	256, 199, 199, 257, 199, 255, 199, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 199, 199, 199, 199, 254, 199, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 199, 199, 199, 199, 199, 254, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	255, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 256, 211, 211, 257, 211, 255, 211, 
	254, 254, 254, 254, 254, 254, 258, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 211, 211, 211, 211, 254, 211, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 211, 211, 211, 211, 211, 254, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 255, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 256, 211, 211, 257, 211, 255, 
	211, 254, 254, 254, 254, 254, 254, 254, 
	254, 259, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 211, 211, 211, 211, 254, 
	211, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 211, 211, 211, 211, 211, 
	254, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 255, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 256, 211, 211, 257, 211, 
	255, 211, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 260, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 211, 211, 211, 211, 
	254, 211, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 211, 211, 211, 211, 
	211, 254, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 211, 255, 211, 211, 211, 211, 
	211, 211, 211, 211, 211, 211, 211, 211, 
	211, 211, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 256, 211, 211, 257, 
	211, 255, 211, 254, 254, 254, 260, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 211, 211, 211, 
	211, 254, 211, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 211, 211, 211, 
	211, 211, 254, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 261, 263, 261, 261, 261, 
	261, 261, 261, 261, 261, 261, 261, 261, 
	261, 261, 261, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 264, 261, 261, 
	261, 261, 263, 261, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 261, 261, 
	261, 261, 262, 261, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 261, 261, 
	261, 261, 261, 262, 264, 261, 261, 265, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 266, 266, 266, 266, 266, 266, 
	266, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 266, 266, 266, 266, 267, 
	266, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 267, 267, 267, 267, 267, 
	267, 267, 267, 266, 266, 266, 266, 266, 
	267, 269, 268, 269, 268, 268, 270, 270, 
	270, 270, 270, 270, 270, 270, 270, 270, 
	268, 270, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 268, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 268, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 272, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 272, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 266, 
	266, 266, 266, 266, 266, 266, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	266, 266, 266, 266, 275, 266, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	266, 266, 266, 266, 266, 275, 276, 272, 
	277, 278, 277, 277, 277, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 277, 
	272, 272, 279, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 280, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 281, 272, 282, 283, 282, 
	282, 282, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 282, 272, 272, 284, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	285, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	286, 272, 288, 289, 288, 288, 288, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 288, 287, 287, 290, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 291, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 292, 287, 294, 
	295, 294, 294, 294, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 294, 293, 
	293, 296, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 297, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 298, 293, 294, 295, 294, 294, 
	294, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 294, 293, 293, 296, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 299, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 298, 
	293, 294, 300, 294, 294, 294, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	294, 293, 293, 296, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 297, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 298, 293, 301, 272, 
	278, 272, 303, 302, 303, 303, 303, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 302, 302, 302, 302, 302, 302, 302, 
	302, 303, 302, 302, 302, 302, 302, 304, 
	302, 302, 302, 302, 302, 302, 302, 305, 
	302, 306, 302, 308, 307, 307, 307, 308, 
	307, 307, 307, 307, 309, 310, 309, 309, 
	309, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 308, 307, 307, 
	307, 307, 307, 309, 307, 307, 311, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	312, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 307, 
	307, 307, 307, 307, 307, 307, 307, 313, 
	307, 307, 314, 307, 309, 315, 309, 309, 
	309, 315, 315, 315, 315, 315, 315, 315, 
	315, 315, 315, 315, 315, 315, 315, 315, 
	315, 315, 315, 309, 315, 316, 317, 318, 
	319, 320, 322, 321, 324, 325, 324, 324, 
	324, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 324, 323, 310, 321, 326, 
	321, 328, 327, 327, 327, 328, 327, 327, 
	327, 327, 329, 330, 329, 329, 329, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 328, 327, 327, 327, 327, 
	327, 329, 327, 327, 331, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 327, 327, 327, 
	327, 327, 327, 327, 327, 332, 327, 329, 
	333, 329, 329, 329, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 333, 333, 
	333, 333, 333, 333, 333, 333, 329, 333, 
	335, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 336, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 334, 
	334, 334, 334, 334, 334, 334, 334, 337, 
	334, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 338, 338, 338, 338, 338, 338, 338, 
	338, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 338, 338, 338, 338, 338, 
	338, 338, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 338, 338, 338, 338, 
	13, 338, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 338, 338, 338, 338, 
	338, 13, 16, 16, 16, 16, 16, 16, 
	16, 16, 16, 16, 338, 341, 340, 340, 
	340, 341, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 341, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 342, 342, 342, 
	342, 342, 342, 342, 342, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	343, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 344, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	345, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 340, 340, 340, 340, 340, 340, 
	340, 340, 346, 340, 340, 347, 340, 348, 
	349, 351, 351, 351, 351, 351, 351, 351, 
	351, 350, 352, 352, 352, 352, 352, 352, 
	352, 352, 350, 350, 353, 353, 38, 38, 
	38, 353, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 353, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 39, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 354, 38, 355, 356, 357, 357, 38, 
	38, 38, 357, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	357, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 39, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 358, 38, 37, 357, 359, 360, 
	361, 361, 25, 25, 25, 361, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 361, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 362, 25, 357, 
	19, 19, 19, 357, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 357, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 363, 19, 353, 25, 
	25, 25, 353, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	353, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 26, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 27, 25, 353, 364, 364, 364, 
	353, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 353, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	365, 364, 366, 367, 367, 364, 364, 364, 
	367, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 367, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	368, 364, 367, 19, 19, 19, 367, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 367, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 363, 
	19, 369, 367, 367, 25, 25, 25, 367, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 367, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 26, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 27, 
	25, 370, 371, 371, 371, 370, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 370, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 372, 372, 372, 372, 372, 372, 372, 
	372, 372, 372, 371, 371, 371, 371, 371, 
	371, 371, 372, 372, 372, 372, 372, 372, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 372, 372, 372, 372, 372, 372, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 371, 371, 371, 373, 371, 370, 374, 
	374, 374, 370, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	370, 374, 370, 375, 375, 375, 370, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 370, 375, 370, 376, 
	376, 376, 370, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	370, 376, 370, 370, 374, 374, 374, 370, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 370, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 374, 374, 374, 
	374, 374, 374, 374, 377, 377, 377, 377, 
	377, 377, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 377, 377, 377, 377, 
	377, 377, 374, 370, 375, 375, 375, 370, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 370, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 378, 378, 378, 378, 378, 
	378, 378, 378, 378, 378, 375, 375, 375, 
	375, 375, 375, 375, 378, 378, 378, 378, 
	378, 378, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 375, 375, 375, 378, 378, 378, 378, 
	378, 378, 375, 370, 376, 376, 376, 370, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 370, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 376, 376, 376, 
	376, 376, 376, 376, 379, 379, 379, 379, 
	379, 379, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 379, 379, 379, 379, 
	379, 379, 376, 380, 383, 382, 382, 382, 
	383, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 383, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 384, 382, 382, 
	382, 382, 382, 382, 382, 384, 384, 384, 
	384, 384, 384, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 384, 384, 384, 
	384, 384, 384, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 382, 
	382, 374, 382, 383, 385, 385, 385, 383, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 383, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 386, 386, 386, 386, 386, 
	386, 386, 386, 386, 386, 385, 385, 385, 
	385, 385, 385, 385, 386, 386, 386, 386, 
	386, 386, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 386, 386, 386, 386, 
	386, 386, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	387, 385, 383, 388, 388, 388, 383, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 383, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 388, 388, 388, 388, 
	388, 388, 388, 389, 389, 389, 389, 389, 
	389, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 389, 389, 389, 389, 389, 
	389, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 390, 
	388, 383, 391, 391, 391, 383, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 383, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 391, 391, 391, 391, 391, 
	391, 391, 392, 392, 392, 392, 392, 392, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 392, 392, 392, 392, 392, 392, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 383, 391, 
	383, 391, 391, 391, 383, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 383, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 391, 391, 391, 391, 391, 391, 
	391, 392, 392, 392, 392, 392, 392, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 392, 392, 392, 392, 392, 392, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 383, 391, 393, 
	383, 392, 392, 392, 383, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 383, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 393, 392, 383, 
	392, 392, 392, 383, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 383, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	392, 392, 392, 392, 381, 392, 381, 383, 
	389, 389, 389, 383, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 383, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 376, 389, 381, 376, 
	376, 376, 381, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	381, 376, 383, 385, 385, 385, 383, 385, 
	385, 385, 385, 394, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 383, 385, 385, 385, 
	385, 385, 394, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 395, 395, 395, 395, 395, 395, 
	395, 395, 395, 395, 385, 385, 385, 385, 
	385, 385, 385, 395, 395, 395, 395, 395, 
	395, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 395, 395, 395, 395, 395, 
	395, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 385, 385, 385, 396, 
	385, 383, 391, 391, 391, 383, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 383, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 397, 397, 397, 397, 397, 397, 397, 
	397, 397, 397, 391, 391, 391, 391, 391, 
	391, 391, 397, 397, 397, 397, 397, 397, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 397, 397, 397, 397, 397, 397, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 383, 391, 
	383, 391, 391, 391, 383, 391, 391, 391, 
	391, 394, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 383, 391, 391, 391, 391, 391, 
	394, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 391, 391, 391, 391, 391, 391, 
	391, 398, 398, 398, 398, 398, 398, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 398, 398, 398, 398, 398, 398, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 396, 391, 383, 
	391, 391, 391, 383, 391, 391, 391, 391, 
	394, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 383, 391, 391, 391, 391, 391, 394, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 399, 
	399, 399, 399, 399, 399, 399, 399, 399, 
	399, 391, 391, 391, 391, 391, 391, 391, 
	399, 399, 399, 399, 399, 399, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	399, 399, 399, 399, 399, 399, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 396, 391, 383, 391, 
	391, 391, 383, 391, 391, 391, 391, 394, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	383, 391, 391, 391, 391, 391, 394, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	391, 391, 391, 391, 391, 391, 391, 400, 
	400, 400, 400, 400, 400, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 400, 
	400, 400, 400, 400, 400, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 396, 391, 383, 391, 391, 
	391, 383, 391, 391, 391, 391, 394, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 383, 
	391, 391, 391, 391, 391, 394, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 401, 401, 401, 
	401, 401, 401, 401, 401, 401, 401, 391, 
	391, 391, 391, 391, 391, 391, 401, 401, 
	401, 401, 401, 401, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 401, 401, 
	401, 401, 401, 401, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 396, 391, 383, 391, 391, 391, 
	383, 391, 391, 391, 391, 394, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 383, 391, 
	391, 391, 391, 391, 394, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 391, 391, 
	391, 391, 391, 391, 391, 402, 402, 402, 
	402, 402, 402, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 402, 402, 402, 
	402, 402, 402, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 396, 391, 383, 391, 391, 391, 383, 
	391, 391, 391, 391, 394, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 383, 391, 391, 
	391, 391, 391, 394, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 403, 391, 391, 391, 
	391, 391, 391, 391, 403, 403, 403, 403, 
	403, 403, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 403, 403, 403, 403, 
	403, 403, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	396, 391, 383, 391, 391, 391, 383, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 383, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 403, 403, 403, 403, 403, 403, 
	403, 403, 403, 403, 391, 391, 391, 391, 
	391, 391, 391, 403, 403, 403, 403, 403, 
	403, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 403, 403, 403, 403, 403, 
	403, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 393, 
	391, 404, 383, 388, 388, 388, 383, 388, 
	388, 388, 388, 394, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 383, 388, 388, 388, 
	388, 388, 394, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 399, 399, 399, 399, 399, 399, 
	399, 399, 399, 399, 388, 388, 388, 388, 
	388, 388, 388, 399, 399, 399, 399, 399, 
	399, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 399, 399, 399, 399, 399, 
	399, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 396, 
	388, 405, 407, 407, 407, 407, 407, 407, 
	407, 407, 407, 407, 406, 406, 406, 406, 
	406, 406, 406, 407, 407, 407, 407, 407, 
	407, 406, 406, 406, 406, 406, 406, 406, 
	406, 406, 406, 406, 406, 406, 406, 406, 
	406, 406, 406, 406, 406, 406, 406, 406, 
	406, 406, 406, 407, 407, 407, 407, 407, 
	407, 406, 406, 409, 408, 408, 408, 409, 
	408, 408, 408, 408, 408, 410, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 409, 408, 408, 
	408, 408, 408, 408, 408, 408, 411, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 408, 
	408, 408, 408, 408, 408, 408, 408, 412, 
	408, 414, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 415, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	413, 413, 413, 413, 413, 413, 413, 413, 
	416, 413, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 417, 417, 417, 417, 417, 417, 
	417, 417, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 417, 417, 417, 417, 
	417, 417, 417, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 417, 417, 417, 
	417, 44, 417, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 417, 417, 417, 
	417, 417, 44, 47, 47, 47, 47, 47, 
	47, 47, 47, 47, 47, 417, 420, 419, 
	419, 419, 420, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	420, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 421, 421, 
	421, 421, 421, 421, 421, 421, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 422, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 423, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 424, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 419, 419, 419, 419, 419, 
	419, 419, 419, 425, 419, 419, 426, 419, 
	427, 428, 430, 430, 430, 430, 430, 430, 
	430, 430, 429, 431, 431, 431, 431, 431, 
	431, 431, 431, 429, 429, 432, 432, 69, 
	69, 69, 432, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	432, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 70, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 433, 69, 434, 435, 436, 436, 
	69, 69, 69, 436, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 436, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 70, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 437, 69, 68, 436, 438, 
	439, 440, 440, 56, 56, 56, 440, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 440, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 57, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 441, 56, 
	436, 50, 50, 50, 436, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 436, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 442, 50, 432, 
	56, 56, 56, 432, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 432, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 432, 443, 443, 
	443, 432, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 432, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 444, 443, 445, 446, 446, 443, 443, 
	443, 446, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 446, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 447, 443, 446, 50, 50, 50, 446, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 446, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	442, 50, 448, 446, 446, 56, 56, 56, 
	446, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 446, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 57, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	58, 56, 449, 450, 450, 450, 449, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 449, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 450, 450, 450, 450, 
	450, 450, 450, 451, 451, 451, 451, 451, 
	451, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 451, 451, 451, 451, 451, 
	451, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 450, 450, 450, 452, 450, 449, 
	453, 453, 453, 449, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 449, 453, 449, 454, 454, 454, 449, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 449, 454, 449, 
	455, 455, 455, 449, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 449, 455, 449, 449, 453, 453, 453, 
	449, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 449, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 453, 453, 
	453, 453, 453, 453, 453, 456, 456, 456, 
	456, 456, 456, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 456, 456, 456, 
	456, 456, 456, 453, 449, 454, 454, 454, 
	449, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 449, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 457, 457, 457, 457, 
	457, 457, 457, 457, 457, 457, 454, 454, 
	454, 454, 454, 454, 454, 457, 457, 457, 
	457, 457, 457, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 454, 454, 454, 
	454, 454, 454, 454, 454, 457, 457, 457, 
	457, 457, 457, 454, 449, 455, 455, 455, 
	449, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 449, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 458, 458, 458, 458, 
	458, 458, 458, 458, 458, 458, 455, 455, 
	455, 455, 455, 455, 455, 458, 458, 458, 
	458, 458, 458, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 458, 458, 458, 
	458, 458, 458, 455, 459, 462, 461, 461, 
	461, 462, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 462, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 463, 463, 463, 
	463, 463, 463, 463, 463, 463, 463, 461, 
	461, 461, 461, 461, 461, 461, 463, 463, 
	463, 463, 463, 463, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 463, 463, 
	463, 463, 463, 463, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 453, 461, 462, 464, 464, 464, 
	462, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 462, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 465, 465, 465, 465, 
	465, 465, 465, 465, 465, 465, 464, 464, 
	464, 464, 464, 464, 464, 465, 465, 465, 
	465, 465, 465, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 465, 465, 465, 
	465, 465, 465, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 466, 464, 462, 467, 467, 467, 462, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 462, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 467, 467, 467, 
	467, 467, 467, 467, 468, 468, 468, 468, 
	468, 468, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 468, 468, 468, 468, 
	468, 468, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	469, 467, 462, 470, 470, 470, 462, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 462, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 470, 470, 470, 470, 
	470, 470, 470, 471, 471, 471, 471, 471, 
	471, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 471, 471, 471, 471, 471, 
	471, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 462, 
	470, 462, 470, 470, 470, 462, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 462, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 470, 470, 470, 470, 470, 
	470, 470, 471, 471, 471, 471, 471, 471, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 471, 471, 471, 471, 471, 471, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 462, 470, 
	472, 462, 471, 471, 471, 462, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 462, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 472, 471, 
	462, 471, 471, 471, 462, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 462, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 460, 471, 460, 
	462, 468, 468, 468, 462, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 462, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 468, 468, 468, 
	468, 468, 468, 468, 468, 455, 468, 460, 
	455, 455, 455, 460, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 460, 455, 462, 464, 464, 464, 462, 
	464, 464, 464, 464, 473, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 462, 464, 464, 
	464, 464, 464, 473, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 474, 474, 474, 474, 474, 
	474, 474, 474, 474, 474, 464, 464, 464, 
	464, 464, 464, 464, 474, 474, 474, 474, 
	474, 474, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 474, 474, 474, 474, 
	474, 474, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 464, 464, 464, 
	475, 464, 462, 470, 470, 470, 462, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 462, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 470, 470, 470, 470, 
	470, 470, 470, 476, 476, 476, 476, 476, 
	476, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 476, 476, 476, 476, 476, 
	476, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 462, 
	470, 462, 470, 470, 470, 462, 470, 470, 
	470, 470, 473, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 462, 470, 470, 470, 470, 
	470, 473, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 477, 477, 477, 477, 477, 477, 477, 
	477, 477, 477, 470, 470, 470, 470, 470, 
	470, 470, 477, 477, 477, 477, 477, 477, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 477, 477, 477, 477, 477, 477, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 475, 470, 
	462, 470, 470, 470, 462, 470, 470, 470, 
	470, 473, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 462, 470, 470, 470, 470, 470, 
	473, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 478, 470, 470, 470, 470, 470, 470, 
	470, 478, 478, 478, 478, 478, 478, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 478, 478, 478, 478, 478, 478, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 475, 470, 462, 
	470, 470, 470, 462, 470, 470, 470, 470, 
	473, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 462, 470, 470, 470, 470, 470, 473, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 470, 470, 470, 470, 470, 470, 470, 
	479, 479, 479, 479, 479, 479, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	479, 479, 479, 479, 479, 479, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 475, 470, 462, 470, 
	470, 470, 462, 470, 470, 470, 470, 473, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	462, 470, 470, 470, 470, 470, 473, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	470, 470, 470, 470, 470, 470, 470, 480, 
	480, 480, 480, 480, 480, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 480, 
	480, 480, 480, 480, 480, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 475, 470, 462, 470, 470, 
	470, 462, 470, 470, 470, 470, 473, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 462, 
	470, 470, 470, 470, 470, 473, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 481, 481, 481, 
	481, 481, 481, 481, 481, 481, 481, 470, 
	470, 470, 470, 470, 470, 470, 481, 481, 
	481, 481, 481, 481, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 481, 481, 
	481, 481, 481, 481, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 475, 470, 462, 470, 470, 470, 
	462, 470, 470, 470, 470, 473, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 462, 470, 
	470, 470, 470, 470, 473, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 482, 482, 482, 482, 
	482, 482, 482, 482, 482, 482, 470, 470, 
	470, 470, 470, 470, 470, 482, 482, 482, 
	482, 482, 482, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 482, 482, 482, 
	482, 482, 482, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 475, 470, 462, 470, 470, 470, 462, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 462, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 482, 482, 482, 482, 482, 
	482, 482, 482, 482, 482, 470, 470, 470, 
	470, 470, 470, 470, 482, 482, 482, 482, 
	482, 482, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 482, 482, 482, 482, 
	482, 482, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	472, 470, 483, 462, 467, 467, 467, 462, 
	467, 467, 467, 467, 473, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 462, 467, 467, 
	467, 467, 467, 473, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 478, 478, 478, 478, 478, 
	478, 478, 478, 478, 478, 467, 467, 467, 
	467, 467, 467, 467, 478, 478, 478, 478, 
	478, 478, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 478, 478, 478, 478, 
	478, 478, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	475, 467, 484, 486, 486, 486, 486, 486, 
	486, 486, 486, 486, 486, 485, 485, 485, 
	485, 485, 485, 485, 486, 486, 486, 486, 
	486, 486, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 485, 486, 486, 486, 486, 
	486, 486, 485, 485, 488, 487, 487, 487, 
	488, 487, 487, 487, 487, 489, 490, 489, 
	489, 489, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 488, 487, 
	487, 487, 487, 487, 489, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	491, 487, 489, 492, 489, 489, 489, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 489, 492, 493, 494, 494, 494, 493, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 493, 494, 496, 
	495, 495, 495, 496, 495, 495, 495, 495, 
	495, 497, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 496, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 498, 495, 499, 500, 500, 
	500, 499, 500, 500, 500, 500, 500, 501, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 499, 
	500, 503, 502, 502, 502, 503, 502, 502, 
	502, 502, 502, 504, 502, 502, 502, 502, 
	502, 502, 502, 502, 502, 502, 502, 502, 
	502, 502, 502, 503, 502, 502, 502, 502, 
	502, 502, 502, 502, 505, 502, 507, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 508, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 509, 506, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 510, 510, 510, 510, 510, 510, 510, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 510, 510, 510, 510, 75, 510, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 510, 510, 510, 510, 510, 75, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	78, 78, 510, 512, 511, 511, 511, 512, 
	511, 511, 511, 511, 511, 513, 511, 511, 
	511, 511, 511, 511, 511, 511, 511, 511, 
	511, 511, 511, 511, 511, 512, 511, 515, 
	514, 514, 514, 515, 514, 514, 514, 514, 
	516, 517, 516, 516, 516, 514, 514, 514, 
	514, 514, 514, 514, 514, 514, 514, 514, 
	514, 515, 514, 514, 514, 514, 514, 516, 
	514, 514, 518, 514, 516, 519, 516, 516, 
	516, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 519, 519, 519, 519, 519, 
	519, 519, 519, 516, 519, 521, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 522, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 520, 520, 520, 520, 
	520, 520, 520, 520, 523, 520, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 524, 524, 
	524, 524, 524, 524, 524, 524, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	524, 524, 524, 524, 524, 524, 524, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 524, 524, 524, 524, 81, 524, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 524, 524, 524, 524, 524, 81, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 524, 526, 525, 525, 525, 526, 525, 
	525, 525, 525, 527, 528, 527, 527, 527, 
	525, 525, 525, 525, 525, 525, 525, 525, 
	525, 525, 525, 525, 526, 525, 525, 525, 
	525, 525, 527, 525, 527, 529, 527, 527, 
	527, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 529, 529, 529, 529, 529, 
	529, 529, 529, 527, 529, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 530, 
	530, 530, 530, 530, 530, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 530, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 532, 532, 532, 532, 532, 532, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 531, 531, 531, 531, 531, 531, 
	531, 531, 532, 533, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 534, 
	88, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 535, 535, 535, 535, 535, 
	535, 535, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 535, 535, 535, 535, 
	86, 535, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 535, 535, 535, 535, 
	535, 86, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 535, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 536, 536, 536, 
	536, 536, 536, 536, 536, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 536, 
	536, 536, 536, 536, 536, 536, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	536, 536, 536, 536, 91, 536, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	536, 536, 536, 536, 536, 91, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	537, 537, 537, 537, 537, 537, 537, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 537, 537, 537, 537, 93, 537, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 537, 537, 537, 537, 537, 93, 539, 
	540, 540, 540, 539, 540, 540, 540, 540, 
	541, 542, 541, 541, 541, 540, 540, 540, 
	540, 540, 540, 540, 540, 540, 540, 540, 
	540, 539, 540, 540, 540, 540, 540, 541, 
	543, 540, 544, 545, 546, 547, 540, 540, 
	540, 548, 549, 540, 549, 540, 550, 540, 
	540, 540, 540, 540, 540, 540, 540, 540, 
	540, 551, 540, 552, 553, 554, 540, 540, 
	555, 556, 555, 555, 557, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 558, 559, 540, 550, 560, 550, 
	561, 562, 563, 564, 565, 566, 538, 538, 
	567, 568, 569, 538, 570, 571, 572, 573, 
	538, 574, 575, 576, 577, 538, 578, 538, 
	579, 538, 540, 580, 540, 549, 540, 538, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 582, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 581, 581, 581, 582, 581, 582, 
	581, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 581, 581, 581, 581, 538, 
	581, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 581, 581, 581, 581, 581, 
	538, 541, 583, 541, 541, 541, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	583, 583, 583, 583, 583, 583, 583, 583, 
	541, 583, 584, 550, 585, 585, 550, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 585, 585, 585, 585, 
	585, 585, 585, 585, 550, 585, 586, 587, 
	588, 589, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 95, 95, 590, 95, 590, 
	95, 95, 590, 590, 95, 95, 95, 592, 
	95, 95, 593, 593, 593, 593, 593, 593, 
	593, 593, 593, 593, 95, 95, 95, 95, 
	95, 95, 95, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 590, 95, 590, 
	590, 591, 95, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 590, 590, 590, 
	95, 590, 591, 594, 594, 594, 594, 594, 
	594, 594, 594, 594, 594, 594, 594, 594, 
	594, 594, 594, 594, 594, 594, 594, 594, 
	594, 594, 594, 594, 594, 594, 594, 594, 
	594, 594, 594, 594, 594, 594, 594, 594, 
	594, 594, 594, 594, 594, 594, 594, 594, 
	594, 594, 594, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 594, 594, 594, 
	594, 594, 594, 594, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 594, 594, 
	594, 594, 591, 594, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 591, 591, 
	591, 591, 591, 591, 591, 591, 594, 594, 
	594, 594, 594, 591, 593, 593, 593, 593, 
	593, 593, 593, 593, 593, 593, 594, 595, 
	585, 550, 585, 550, 585, 550, 585, 597, 
	596, 550, 598, 585, 550, 585, 599, 550, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 550, 
	590, 550, 585, 550, 550, 585, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 581, 582, 
	581, 581, 581, 581, 581, 581, 581, 581, 
	581, 581, 581, 581, 581, 581, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	581, 581, 581, 582, 581, 582, 581, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 581, 581, 581, 581, 555, 581, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 581, 581, 581, 581, 581, 555, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	582, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 600, 600, 600, 582, 600, 582, 600, 
	555, 555, 555, 555, 601, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 600, 600, 600, 600, 555, 600, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 600, 600, 600, 600, 600, 555, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 582, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 600, 600, 600, 582, 600, 582, 
	600, 555, 555, 555, 555, 555, 555, 602, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 600, 600, 600, 600, 555, 
	600, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 600, 600, 600, 600, 600, 
	555, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 582, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 600, 600, 600, 582, 600, 
	582, 600, 555, 555, 555, 555, 555, 555, 
	555, 555, 603, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 600, 600, 600, 600, 
	555, 600, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 600, 600, 600, 600, 
	600, 555, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 582, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 600, 600, 600, 582, 
	600, 582, 600, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	604, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 600, 600, 600, 
	600, 555, 600, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 600, 600, 600, 
	600, 600, 555, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 582, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 600, 600, 600, 
	582, 600, 582, 600, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 605, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 600, 600, 
	600, 600, 555, 600, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 600, 600, 
	600, 600, 600, 555, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 600, 582, 600, 600, 
	600, 600, 600, 600, 600, 600, 600, 600, 
	600, 600, 600, 600, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 600, 600, 
	600, 582, 600, 582, 600, 555, 555, 555, 
	604, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 600, 
	600, 600, 600, 555, 600, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 600, 
	600, 600, 600, 600, 555, 599, 590, 542, 
	590, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	607, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 608, 
	609, 538, 538, 538, 538, 538, 610, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 611, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 612, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 613, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 614, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	615, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 616, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	617, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 618, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 619, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 620, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 621, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 617, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	622, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 621, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 623, 538, 624, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 625, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 626, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 619, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 619, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 627, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	628, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 629, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 630, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 619, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 631, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 632, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 619, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 633, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 634, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 635, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 619, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 636, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 626, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 637, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 619, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 638, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 639, 582, 639, 639, 
	639, 639, 639, 639, 639, 639, 639, 639, 
	639, 639, 639, 639, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 639, 639, 
	639, 582, 639, 582, 639, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 639, 
	639, 639, 639, 538, 639, 538, 538, 538, 
	538, 538, 538, 538, 538, 640, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 639, 
	639, 639, 639, 639, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 641, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 642, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 643, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 644, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 645, 538, 646, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 647, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	619, 538, 538, 538, 648, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 619, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 619, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	649, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 650, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 635, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 651, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 572, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 633, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 619, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 619, 538, 538, 538, 538, 538, 538, 
	538, 619, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 652, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 631, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 653, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 654, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 655, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 619, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 656, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 657, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 658, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 635, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 659, 538, 538, 538, 660, 
	538, 538, 538, 538, 538, 661, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 661, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 619, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 619, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 662, 538, 538, 663, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 664, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 624, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 665, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 666, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	667, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 619, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 668, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 669, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 670, 671, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 619, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 672, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 635, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	673, 538, 538, 674, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	619, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 630, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 675, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 676, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 648, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 677, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 572, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 538, 538, 538, 678, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 672, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 630, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 679, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 680, 538, 538, 538, 
	538, 538, 538, 538, 681, 538, 538, 538, 
	538, 538, 538, 538, 682, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 582, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 582, 606, 
	582, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	538, 606, 538, 538, 538, 538, 648, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 606, 
	606, 538, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 582, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 606, 606, 606, 582, 
	606, 582, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 538, 606, 538, 538, 538, 538, 636, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	606, 606, 538, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 582, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 606, 606, 606, 
	582, 606, 582, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 538, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 660, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 606, 606, 538, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 582, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 606, 606, 
	606, 582, 606, 582, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 538, 606, 538, 538, 538, 
	538, 538, 538, 538, 683, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 606, 606, 538, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 582, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 606, 
	606, 606, 582, 606, 582, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 538, 606, 538, 538, 
	538, 538, 630, 538, 538, 538, 658, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 606, 606, 538, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 582, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	606, 606, 606, 582, 606, 582, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 538, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 684, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 606, 606, 538, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	582, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 606, 606, 606, 582, 606, 582, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 538, 606, 
	538, 538, 538, 538, 685, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 606, 606, 538, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	606, 582, 606, 606, 606, 606, 606, 606, 
	606, 606, 606, 606, 606, 606, 606, 606, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 606, 606, 606, 582, 606, 582, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 538, 
	606, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 538, 624, 538, 538, 538, 
	538, 538, 538, 538, 538, 538, 538, 538, 
	538, 538, 538, 606, 606, 606, 606, 606, 
	538, 550, 585, 687, 688, 688, 688, 687, 
	688, 688, 688, 688, 689, 688, 689, 689, 
	689, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 687, 688, 688, 
	688, 688, 688, 689, 688, 688, 690, 688, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 688, 691, 
	688, 688, 686, 688, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 688, 688, 
	688, 688, 688, 686, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 692, 100, 692, 692, 
	692, 692, 692, 692, 692, 692, 692, 692, 
	692, 692, 692, 692, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 101, 692, 
	692, 692, 692, 100, 692, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 692, 
	692, 692, 692, 99, 692, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 692, 
	692, 692, 692, 692, 99, 689, 693, 689, 
	689, 689, 693, 693, 693, 693, 693, 693, 
	693, 693, 693, 693, 693, 693, 693, 693, 
	693, 693, 693, 693, 689, 693, 694, 695, 
	696, 697, 698, 692, 699, 701, 702, 702, 
	702, 701, 702, 702, 702, 702, 703, 704, 
	703, 703, 703, 702, 702, 702, 702, 702, 
	702, 702, 702, 702, 702, 702, 702, 701, 
	702, 702, 702, 702, 702, 703, 705, 702, 
	706, 702, 707, 708, 702, 702, 702, 709, 
	710, 702, 710, 702, 707, 702, 702, 702, 
	702, 702, 702, 702, 702, 702, 702, 702, 
	702, 711, 712, 713, 702, 702, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	715, 716, 702, 707, 700, 707, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	702, 717, 702, 710, 702, 700, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 718, 719, 
	718, 718, 718, 718, 718, 718, 718, 718, 
	718, 718, 718, 718, 718, 718, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	718, 718, 718, 718, 718, 719, 718, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 718, 718, 718, 718, 700, 718, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 700, 700, 700, 700, 700, 700, 700, 
	700, 718, 718, 718, 718, 718, 700, 721, 
	720, 722, 703, 723, 703, 703, 703, 723, 
	723, 723, 723, 723, 723, 723, 723, 723, 
	723, 723, 723, 723, 723, 723, 723, 723, 
	723, 703, 723, 724, 707, 725, 725, 707, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 725, 725, 725, 
	725, 725, 725, 725, 725, 707, 725, 726, 
	727, 728, 729, 707, 725, 707, 725, 707, 
	725, 707, 730, 725, 707, 725, 732, 707, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 731, 
	731, 731, 731, 731, 731, 731, 731, 707, 
	731, 707, 725, 707, 707, 725, 733, 733, 
	733, 733, 733, 733, 733, 733, 733, 733, 
	733, 733, 733, 733, 733, 733, 733, 733, 
	733, 733, 733, 733, 733, 733, 733, 733, 
	733, 733, 733, 733, 733, 733, 733, 719, 
	733, 733, 733, 733, 733, 733, 733, 733, 
	733, 733, 733, 733, 733, 733, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	733, 733, 733, 733, 733, 719, 733, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 733, 733, 733, 733, 714, 733, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 714, 714, 714, 714, 714, 714, 714, 
	714, 733, 733, 733, 733, 733, 714, 732, 
	731, 704, 731, 707, 725, 735, 734, 734, 
	734, 735, 734, 734, 734, 734, 736, 737, 
	736, 736, 736, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 735, 
	734, 734, 734, 734, 734, 736, 734, 734, 
	738, 734, 109, 739, 734, 740, 734, 741, 
	109, 141, 742, 143, 109, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 743, 
	734, 744, 141, 745, 746, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 734, 734, 
	141, 747, 141, 109, 734, 734, 734, 734, 
	734, 734, 734, 734, 734, 734, 748, 734, 
	734, 734, 734, 734, 734, 749, 734, 750, 
	734, 734, 751, 734, 752, 734, 734, 734, 
	155, 156, 734, 109, 734, 753, 753, 753, 
	753, 753, 753, 753, 753, 753, 736, 753, 
	736, 736, 736, 753, 753, 753, 753, 753, 
	753, 753, 753, 753, 753, 753, 753, 753, 
	753, 753, 753, 753, 753, 736, 753, 753, 
	753, 753, 136, 137, 753, 138, 753, 139, 
	140, 141, 142, 143, 136, 753, 753, 753, 
	753, 753, 753, 753, 753, 753, 753, 144, 
	753, 145, 141, 146, 147, 753, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	148, 149, 141, 109, 104, 753, 104, 104, 
	104, 104, 104, 104, 104, 104, 150, 104, 
	104, 104, 104, 104, 104, 151, 104, 152, 
	104, 104, 153, 104, 154, 104, 104, 104, 
	155, 156, 753, 109, 753, 104, 754, 755, 
	755, 755, 754, 755, 755, 755, 755, 141, 
	756, 141, 141, 141, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 755, 755, 
	754, 755, 755, 755, 755, 755, 141, 755, 
	755, 755, 755, 755, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 755, 755, 
	755, 755, 755, 755, 755, 755, 755, 755, 
	755, 755, 755, 141, 755, 141, 756, 141, 
	141, 141, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 141, 103, 103, 103, 
	103, 103, 109, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 141, 103, 141, 756, 141, 141, 141, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 141, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 141, 
	103, 757, 141, 756, 141, 141, 141, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 141, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 759, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 141, 758, 
	141, 756, 141, 141, 141, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 141, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 141, 141, 103, 760, 
	754, 141, 754, 762, 761, 764, 765, 764, 
	764, 764, 763, 763, 763, 763, 763, 763, 
	763, 763, 763, 763, 763, 763, 763, 763, 
	763, 763, 763, 763, 764, 763, 766, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	105, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 106, 754, 754, 754, 754, 105, 754, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 754, 754, 754, 754, 104, 754, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 104, 104, 104, 104, 104, 104, 
	104, 104, 754, 754, 754, 754, 754, 104, 
	767, 141, 756, 141, 141, 141, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	141, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 141, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 109, 754, 768, 769, 
	770, 771, 772, 773, 141, 756, 141, 141, 
	141, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 141, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 109, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	754, 754, 754, 754, 754, 754, 754, 754, 
	141, 754, 141, 761, 109, 774, 109, 774, 
	775, 776, 775, 775, 775, 763, 763, 763, 
	763, 763, 763, 763, 763, 763, 763, 763, 
	763, 763, 763, 763, 763, 763, 763, 775, 
	763, 777, 774, 778, 778, 778, 778, 778, 
	778, 778, 778, 778, 112, 778, 112, 112, 
	112, 778, 778, 778, 778, 778, 778, 778, 
	778, 778, 778, 778, 778, 778, 778, 778, 
	778, 778, 778, 112, 778, 778, 778, 778, 
	113, 114, 778, 115, 778, 116, 117, 118, 
	119, 120, 113, 778, 778, 778, 778, 778, 
	778, 778, 778, 778, 778, 121, 778, 122, 
	118, 123, 124, 778, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 111, 111, 
	111, 111, 111, 111, 111, 111, 125, 126, 
	118, 127, 111, 778, 111, 111, 111, 111, 
	111, 111, 111, 111, 128, 111, 111, 111, 
	111, 111, 111, 129, 111, 130, 111, 111, 
	131, 111, 132, 111, 111, 111, 133, 134, 
	778, 127, 778, 111, 141, 774, 779, 774, 
	780, 774, 781, 774, 782, 774, 783, 186, 
	186, 186, 783, 186, 186, 186, 186, 784, 
	186, 784, 784, 784, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	783, 186, 186, 186, 186, 186, 784, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 186, 785, 186, 186, 188, 186, 188, 
	188, 188, 192, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 186, 186, 186, 186, 186, 188, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 185, 
	786, 185, 185, 185, 185, 185, 185, 185, 
	185, 185, 185, 185, 185, 185, 185, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 186, 185, 185, 185, 185, 786, 185, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 185, 185, 185, 185, 188, 185, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 185, 185, 185, 185, 185, 188, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 189, 787, 189, 189, 189, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	189, 787, 787, 787, 787, 787, 787, 787, 
	190, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 787, 191, 787, 787, 188, 
	787, 188, 188, 188, 192, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 787, 787, 787, 787, 787, 
	188, 788, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 787, 786, 787, 787, 787, 787, 
	787, 787, 787, 787, 787, 787, 787, 787, 
	787, 787, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 186, 787, 787, 787, 
	787, 786, 787, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 787, 787, 787, 
	787, 188, 787, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 789, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 188, 787, 787, 787, 
	787, 787, 188, 193, 787, 791, 790, 790, 
	790, 791, 790, 790, 790, 790, 792, 790, 
	792, 792, 792, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 791, 
	790, 790, 790, 790, 790, 792, 790, 790, 
	793, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 794, 790, 790, 790, 790, 790, 790, 
	790, 795, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	790, 790, 790, 790, 790, 790, 790, 790, 
	796, 790, 792, 797, 792, 792, 792, 797, 
	797, 797, 797, 797, 797, 797, 797, 797, 
	797, 797, 797, 797, 797, 797, 797, 797, 
	797, 792, 797, 798, 799, 800, 801, 803, 
	802, 804, 805, 802, 806, 808, 809, 809, 
	809, 808, 809, 809, 809, 809, 810, 811, 
	810, 810, 810, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 808, 
	809, 809, 809, 809, 809, 810, 809, 809, 
	812, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 809, 809, 
	809, 809, 809, 809, 809, 809, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	809, 813, 809, 809, 807, 809, 807, 807, 
	807, 807, 807, 807, 807, 807, 814, 807, 
	807, 807, 807, 807, 807, 815, 807, 816, 
	807, 807, 817, 807, 818, 807, 807, 807, 
	809, 809, 809, 809, 809, 807, 819, 819, 
	819, 819, 819, 819, 819, 819, 819, 819, 
	819, 819, 819, 819, 819, 819, 819, 819, 
	819, 819, 819, 819, 819, 819, 819, 819, 
	819, 819, 819, 819, 819, 819, 819, 819, 
	819, 819, 819, 819, 819, 819, 819, 819, 
	819, 819, 819, 819, 819, 819, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	819, 819, 819, 819, 819, 819, 819, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 819, 819, 819, 819, 807, 819, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 819, 819, 819, 819, 819, 807, 810, 
	820, 810, 810, 810, 820, 820, 820, 820, 
	820, 820, 820, 820, 820, 820, 820, 820, 
	820, 820, 820, 820, 820, 820, 810, 820, 
	821, 822, 823, 824, 825, 827, 826, 828, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 829, 829, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 807, 
	829, 807, 807, 807, 807, 807, 830, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 829, 
	807, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 829, 
	829, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	807, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	831, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	829, 807, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	829, 829, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 807, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 832, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 829, 807, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 829, 829, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 807, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	833, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 829, 807, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 829, 829, 829, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 829, 
	829, 829, 829, 807, 829, 807, 807, 807, 
	830, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 829, 
	829, 829, 829, 829, 807, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 829, 
	829, 829, 829, 829, 829, 829, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	829, 829, 829, 829, 807, 829, 807, 807, 
	807, 807, 834, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	829, 829, 829, 829, 829, 807, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	829, 829, 829, 829, 829, 829, 829, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 829, 829, 829, 829, 807, 829, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 835, 807, 807, 807, 807, 807, 807, 
	807, 829, 829, 829, 829, 829, 807, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 829, 829, 829, 829, 829, 829, 829, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 807, 829, 
	807, 807, 836, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 829, 807, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 829, 829, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 807, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 837, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 829, 
	807, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 829, 
	829, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	807, 829, 807, 807, 807, 807, 830, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	829, 807, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	829, 829, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 807, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	838, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 829, 807, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 829, 829, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 807, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 839, 
	807, 807, 807, 807, 807, 807, 807, 840, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 829, 807, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 829, 829, 829, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 829, 
	829, 829, 829, 807, 829, 807, 807, 807, 
	807, 841, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 829, 
	829, 829, 829, 829, 807, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 829, 
	829, 829, 829, 829, 829, 829, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	829, 829, 829, 829, 807, 829, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	842, 807, 807, 807, 807, 807, 807, 807, 
	829, 829, 829, 829, 829, 807, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	829, 829, 829, 829, 829, 829, 829, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 829, 829, 829, 829, 807, 829, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 830, 807, 807, 807, 807, 807, 807, 
	807, 829, 829, 829, 829, 829, 807, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 829, 829, 829, 829, 829, 829, 829, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 807, 829, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	843, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 829, 807, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 829, 829, 829, 829, 829, 829, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 807, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 830, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 829, 
	807, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 829, 829, 829, 829, 829, 
	829, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	807, 829, 807, 807, 807, 807, 807, 807, 
	807, 844, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	829, 807, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 829, 829, 829, 829, 
	829, 829, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 807, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 845, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 829, 807, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 829, 829, 829, 829, 829, 
	829, 829, 829, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 829, 829, 829, 
	829, 829, 829, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 807, 829, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 807, 837, 
	807, 807, 807, 807, 807, 807, 807, 807, 
	807, 807, 807, 807, 807, 807, 829, 829, 
	829, 829, 829, 807, 847, 210, 210, 210, 
	847, 210, 210, 210, 210, 848, 849, 848, 
	848, 848, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 847, 210, 
	210, 210, 210, 210, 848, 850, 210, 851, 
	210, 852, 853, 210, 854, 210, 855, 856, 
	210, 857, 858, 859, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 860, 210, 
	861, 862, 863, 864, 210, 865, 866, 865, 
	865, 867, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 868, 
	869, 210, 870, 871, 210, 872, 873, 874, 
	875, 876, 877, 846, 846, 878, 879, 880, 
	846, 881, 882, 883, 884, 846, 885, 886, 
	887, 888, 846, 889, 846, 890, 846, 891, 
	892, 210, 870, 210, 846, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 255, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	199, 199, 257, 199, 255, 199, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	199, 199, 199, 199, 846, 199, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	199, 199, 199, 199, 199, 846, 894, 893, 
	893, 895, 893, 896, 898, 899, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 900, 897, 902, 
	901, 903, 904, 905, 848, 906, 848, 848, 
	848, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 848, 906, 908, 907, 910, 
	911, 910, 910, 910, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 909, 910, 909, 
	210, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 210, 912, 913, 914, 915, 916, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 918, 918, 918, 918, 918, 918, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 918, 920, 208, 208, 208, 920, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 920, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 208, 208, 208, 
	208, 208, 208, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 209, 209, 209, 
	209, 209, 209, 209, 209, 208, 922, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 210, 921, 923, 
	925, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 924, 924, 924, 924, 924, 
	924, 924, 924, 210, 924, 210, 199, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	926, 921, 921, 921, 210, 921, 926, 926, 
	926, 926, 926, 926, 926, 926, 926, 926, 
	921, 921, 921, 210, 210, 921, 927, 912, 
	210, 912, 912, 928, 928, 928, 912, 928, 
	928, 928, 928, 928, 928, 928, 928, 928, 
	928, 928, 928, 928, 928, 928, 928, 928, 
	928, 928, 928, 928, 912, 928, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 930, 
	931, 912, 932, 213, 933, 931, 912, 912, 
	934, 935, 912, 935, 912, 213, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	936, 912, 937, 938, 939, 912, 940, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 941, 912, 912, 213, 929, 213, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 912, 942, 912, 935, 912, 929, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	944, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 943, 943, 943, 945, 943, 944, 943, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 943, 943, 943, 943, 929, 943, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 929, 929, 929, 929, 929, 929, 
	929, 929, 943, 943, 943, 943, 943, 929, 
	947, 946, 948, 950, 951, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 949, 949, 952, 949, 954, 955, 
	953, 956, 957, 958, 959, 213, 943, 943, 
	213, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 213, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	943, 943, 943, 943, 943, 943, 943, 943, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 943, 943, 943, 943, 943, 943, 
	943, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 943, 943, 943, 943, 212, 
	943, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 943, 943, 943, 943, 943, 
	212, 215, 215, 215, 215, 215, 215, 215, 
	215, 215, 215, 943, 213, 943, 213, 943, 
	213, 943, 213, 960, 943, 213, 943, 213, 
	943, 213, 213, 943, 213, 943, 961, 962, 
	912, 963, 210, 912, 870, 210, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 210, 912, 210, 
	922, 912, 966, 965, 965, 965, 966, 965, 
	965, 965, 965, 967, 968, 967, 967, 967, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 966, 965, 965, 965, 
	965, 965, 967, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 965, 970, 965, 
	965, 969, 965, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 965, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 971, 971, 971, 971, 972, 971, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 971, 971, 971, 971, 971, 972, 
	973, 973, 973, 973, 973, 973, 973, 973, 
	973, 973, 973, 973, 973, 973, 973, 973, 
	973, 973, 973, 973, 973, 973, 973, 973, 
	973, 973, 973, 973, 973, 973, 973, 973, 
	973, 973, 973, 973, 973, 973, 973, 973, 
	973, 973, 973, 973, 973, 973, 973, 973, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 973, 973, 973, 973, 973, 973, 
	973, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 973, 973, 973, 973, 974, 
	973, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 973, 973, 973, 973, 973, 
	974, 977, 976, 976, 976, 977, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 977, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 978, 978, 978, 978, 978, 978, 978, 
	978, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 979, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 980, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 981, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 976, 976, 
	976, 976, 976, 976, 976, 976, 982, 976, 
	976, 983, 976, 984, 985, 987, 987, 987, 
	987, 987, 987, 987, 987, 986, 988, 988, 
	988, 988, 988, 988, 988, 988, 986, 986, 
	989, 989, 249, 249, 249, 989, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 989, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	250, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 990, 249, 991, 
	992, 993, 993, 249, 249, 249, 993, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 993, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 250, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 994, 249, 
	248, 993, 995, 996, 997, 997, 236, 236, 
	236, 997, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 997, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 237, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 998, 236, 993, 230, 230, 230, 993, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 993, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	999, 230, 989, 236, 236, 236, 989, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 989, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 237, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 238, 236, 
	989, 1000, 1000, 1000, 989, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 989, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1001, 1000, 1002, 1003, 
	1003, 1000, 1000, 1000, 1003, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1003, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1004, 1000, 1003, 230, 
	230, 230, 1003, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	1003, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 999, 230, 1005, 1003, 1003, 
	236, 236, 236, 1003, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 1003, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 237, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 238, 236, 1006, 1007, 1007, 
	1007, 1006, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1006, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 
	1008, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 
	1008, 1008, 1008, 1008, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 
	1008, 1008, 1008, 1008, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 
	1009, 1007, 1006, 1010, 1010, 1010, 1006, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1006, 1010, 1006, 1011, 
	1011, 1011, 1006, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1006, 1011, 1006, 1012, 1012, 1012, 1006, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1006, 1012, 1006, 1006, 
	1010, 1010, 1010, 1006, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1006, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1013, 
	1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 
	1013, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1013, 1013, 1013, 1013, 1013, 1013, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 
	1013, 1013, 1013, 1013, 1013, 1013, 1010, 1006, 
	1011, 1011, 1011, 1006, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1006, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1014, 
	1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 
	1014, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1014, 1014, 1014, 1014, 1014, 1014, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 
	1014, 1014, 1014, 1014, 1014, 1014, 1011, 1006, 
	1012, 1012, 1012, 1006, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1006, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1015, 
	1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 
	1015, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1015, 1015, 1015, 1015, 1015, 1015, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1015, 1015, 1015, 1015, 1015, 1015, 1012, 1016, 
	1019, 1018, 1018, 1018, 1019, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1019, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 
	1020, 1020, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1020, 1020, 1020, 1020, 1020, 1020, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1020, 1020, 1020, 1020, 1020, 1020, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 
	1018, 1018, 1018, 1018, 1018, 1010, 1018, 1019, 
	1021, 1021, 1021, 1019, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1019, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1022, 
	1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 
	1022, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1022, 1022, 1022, 1022, 1022, 1022, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1022, 1022, 1022, 1022, 1022, 1022, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1023, 1021, 1019, 1024, 
	1024, 1024, 1019, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1019, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1025, 
	1025, 1025, 1025, 1025, 1025, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1025, 
	1025, 1025, 1025, 1025, 1025, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1026, 1024, 1019, 1027, 1027, 
	1027, 1019, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1019, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 
	1028, 1028, 1028, 1028, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1028, 1028, 
	1028, 1028, 1028, 1028, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1019, 1027, 1019, 1027, 1027, 1027, 
	1019, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1019, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 
	1028, 1028, 1028, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1028, 1028, 1028, 
	1028, 1028, 1028, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1019, 1027, 1029, 1019, 1028, 1028, 1028, 
	1019, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1019, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1029, 1028, 1019, 1028, 1028, 1028, 1019, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1019, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 
	1017, 1028, 1017, 1019, 1025, 1025, 1025, 1019, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1019, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 
	1012, 1025, 1017, 1012, 1012, 1012, 1017, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 
	1012, 1012, 1012, 1012, 1017, 1012, 1019, 1021, 
	1021, 1021, 1019, 1021, 1021, 1021, 1021, 1030, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1019, 1021, 1021, 1021, 1021, 1021, 1030, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1031, 1031, 
	1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1031, 
	1031, 1031, 1031, 1031, 1031, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1031, 
	1031, 1031, 1031, 1031, 1031, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 
	1021, 1021, 1021, 1032, 1021, 1019, 1027, 1027, 
	1027, 1019, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1019, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1033, 1033, 1033, 
	1033, 1033, 1033, 1033, 1033, 1033, 1033, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1033, 1033, 
	1033, 1033, 1033, 1033, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1033, 1033, 
	1033, 1033, 1033, 1033, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1019, 1027, 1019, 1027, 1027, 1027, 
	1019, 1027, 1027, 1027, 1027, 1030, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1019, 1027, 
	1027, 1027, 1027, 1027, 1030, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1034, 1034, 1034, 1034, 
	1034, 1034, 1034, 1034, 1034, 1034, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1034, 1034, 1034, 
	1034, 1034, 1034, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1034, 1034, 1034, 
	1034, 1034, 1034, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1029, 1027, 1019, 1027, 1027, 1027, 1019, 
	1027, 1027, 1027, 1027, 1030, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1019, 1027, 1027, 
	1027, 1027, 1027, 1030, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1035, 1035, 1035, 1035, 1035, 
	1035, 1035, 1035, 1035, 1035, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1035, 1035, 1035, 1035, 
	1035, 1035, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1035, 1035, 1035, 1035, 
	1035, 1035, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1029, 1027, 1019, 1027, 1027, 1027, 1019, 1027, 
	1027, 1027, 1027, 1030, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1019, 1027, 1027, 1027, 
	1027, 1027, 1030, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1036, 1036, 1036, 1036, 1036, 1036, 
	1036, 1036, 1036, 1036, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1036, 1036, 1036, 1036, 1036, 
	1036, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1036, 1036, 1036, 1036, 1036, 
	1036, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1029, 
	1027, 1019, 1027, 1027, 1027, 1019, 1027, 1027, 
	1027, 1027, 1030, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1019, 1027, 1027, 1027, 1027, 
	1027, 1030, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1037, 1037, 1037, 1037, 1037, 1037, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1037, 1037, 1037, 1037, 1037, 1037, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1029, 1027, 
	1019, 1027, 1027, 1027, 1019, 1027, 1027, 1027, 
	1027, 1030, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1019, 1027, 1027, 1027, 1027, 1027, 
	1030, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1038, 1038, 1038, 1038, 1038, 1038, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1038, 1038, 1038, 1038, 1038, 1038, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1029, 1027, 1019, 
	1027, 1027, 1027, 1019, 1027, 1027, 1027, 1027, 
	1030, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1019, 1027, 1027, 1027, 1027, 1027, 1030, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1039, 1039, 1039, 1039, 1039, 1039, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1039, 1039, 1039, 1039, 1039, 1039, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1029, 1027, 1019, 1027, 
	1027, 1027, 1019, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1019, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1039, 1039, 
	1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1039, 
	1039, 1039, 1039, 1039, 1039, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1039, 
	1039, 1039, 1039, 1039, 1039, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1029, 1027, 1019, 1024, 1024, 
	1024, 1019, 1024, 1024, 1024, 1024, 1030, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1019, 
	1024, 1024, 1024, 1024, 1024, 1030, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1040, 1040, 1040, 
	1040, 1040, 1040, 1040, 1040, 1040, 1040, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1040, 1040, 
	1040, 1040, 1040, 1040, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1040, 1040, 
	1040, 1040, 1040, 1040, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 
	1024, 1024, 1032, 1024, 1019, 1027, 1027, 1027, 
	1019, 1027, 1027, 1027, 1027, 1030, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1019, 1027, 
	1027, 1027, 1027, 1027, 1030, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1041, 1041, 1041, 1041, 
	1041, 1041, 1041, 1041, 1041, 1041, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1041, 1041, 1041, 
	1041, 1041, 1041, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1041, 1041, 1041, 
	1041, 1041, 1041, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1032, 1027, 1019, 1027, 1027, 1027, 1019, 
	1027, 1027, 1027, 1027, 1030, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1019, 1027, 1027, 
	1027, 1027, 1027, 1030, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1042, 1042, 1042, 1042, 1042, 
	1042, 1042, 1042, 1042, 1042, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1042, 1042, 1042, 1042, 
	1042, 1042, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1042, 1042, 1042, 1042, 
	1042, 1042, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1032, 1027, 1019, 1027, 1027, 1027, 1019, 1027, 
	1027, 1027, 1027, 1030, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1019, 1027, 1027, 1027, 
	1027, 1027, 1030, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1043, 1043, 1043, 1043, 1043, 1043, 
	1043, 1043, 1043, 1043, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1043, 1043, 1043, 1043, 1043, 
	1043, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1043, 1043, 1043, 1043, 1043, 
	1043, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1032, 
	1027, 1019, 1027, 1027, 1027, 1019, 1027, 1027, 
	1027, 1027, 1030, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1019, 1027, 1027, 1027, 1027, 
	1027, 1030, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 
	1039, 1039, 1039, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1039, 1039, 1039, 1039, 1039, 1039, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1039, 1039, 1039, 1039, 1039, 1039, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 
	1027, 1027, 1027, 1027, 1027, 1027, 1032, 1027, 
	1044, 1045, 1047, 1047, 1047, 1047, 1047, 1047, 
	1047, 1047, 1047, 1047, 1046, 1046, 1046, 1046, 
	1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 
	1047, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 
	1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 
	1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 
	1046, 1046, 1046, 1047, 1047, 1047, 1047, 1047, 
	1047, 1046, 1046, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 199, 255, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	199, 199, 199, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 256, 199, 199, 
	257, 199, 255, 199, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 199, 199, 
	199, 199, 254, 199, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 199, 199, 
	199, 199, 199, 254, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 255, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 256, 912, 
	912, 257, 912, 255, 912, 254, 254, 254, 
	254, 1048, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 912, 
	912, 912, 912, 254, 912, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 912, 
	912, 912, 912, 912, 254, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 255, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 256, 
	912, 912, 257, 912, 255, 912, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 1049, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	912, 912, 912, 912, 254, 912, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	912, 912, 912, 912, 912, 254, 1050, 1051, 
	912, 907, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1053, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	1054, 1055, 846, 846, 846, 846, 846, 1056, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1057, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	1058, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1059, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 1060, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 1061, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1062, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 1063, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1064, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1065, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 1066, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1067, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 1063, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 1068, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1067, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1069, 846, 
	1070, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 1071, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 1072, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1065, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 1065, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 1073, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1074, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 1075, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 1076, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1065, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	1077, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 1078, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1065, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 1079, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1080, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1081, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 1065, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 1082, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1072, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	1083, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1065, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 846, 1065, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1084, 846, 1085, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1086, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 1065, 846, 846, 846, 
	1083, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 1065, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1087, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1088, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1081, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 1089, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 883, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1079, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1065, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 1090, 846, 846, 846, 
	846, 846, 846, 846, 1065, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1091, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1077, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1092, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1093, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	1094, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 1065, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1095, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 1096, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1097, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1081, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 1098, 846, 
	846, 846, 1099, 846, 846, 846, 846, 846, 
	1100, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1100, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1065, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1065, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1101, 846, 846, 1102, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1103, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1104, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 1090, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 1105, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1106, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 1107, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1065, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 1108, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 1109, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1110, 1111, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1065, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 1112, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1113, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 1114, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1115, 1117, 1115, 1115, 1115, 
	1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 
	1115, 1115, 1115, 1116, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1118, 1115, 1115, 
	1119, 1115, 1117, 1115, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1116, 1115, 1115, 
	1115, 1115, 1116, 1115, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 
	1116, 1116, 1116, 1116, 1116, 1116, 1115, 1115, 
	1115, 1115, 1115, 1116, 898, 1120, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 900, 897, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1121, 846, 846, 1122, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1065, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1076, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 1123, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1124, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1083, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1125, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 883, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 846, 846, 1126, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1127, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 1076, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1081, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1128, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 1129, 846, 
	846, 846, 846, 846, 846, 846, 1130, 846, 
	846, 846, 846, 846, 846, 846, 1131, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	1083, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 1132, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1133, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1090, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1134, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 255, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 256, 1052, 1052, 257, 1052, 255, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 846, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1090, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1052, 1052, 1052, 1052, 1052, 
	846, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 255, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 256, 1052, 1052, 257, 1052, 
	255, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	846, 1052, 846, 846, 846, 846, 846, 846, 
	846, 1135, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 1052, 1052, 1052, 1052, 
	1052, 846, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 255, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 256, 1052, 1052, 257, 
	1052, 255, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 846, 1052, 846, 846, 846, 846, 1076, 
	846, 846, 846, 1136, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 1052, 1052, 1052, 
	1052, 1052, 846, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 255, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 256, 1052, 1052, 
	257, 1052, 255, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 846, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1137, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 1052, 1052, 
	1052, 1052, 1052, 846, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 255, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 256, 1052, 
	1052, 257, 1052, 255, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 846, 1052, 846, 846, 846, 
	846, 1090, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 1052, 
	1052, 1052, 1052, 1052, 846, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 255, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 256, 
	1052, 1052, 257, 1052, 255, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 846, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 1138, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	1052, 1052, 1052, 1052, 1052, 846, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 255, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	256, 1052, 1052, 257, 1052, 255, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 846, 1052, 846, 
	846, 846, 846, 1139, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 1052, 1052, 1052, 1052, 1052, 846, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	255, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 256, 1052, 1052, 257, 1052, 255, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 846, 1052, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 846, 1070, 846, 846, 846, 846, 
	846, 846, 846, 846, 846, 846, 846, 846, 
	846, 846, 1052, 1052, 1052, 1052, 1052, 846, 
	1140, 210, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	922, 912, 1142, 1141, 1141, 1141, 1142, 1141, 
	1141, 1141, 1141, 1143, 1144, 1143, 1143, 1143, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1142, 1141, 1141, 1141, 
	1141, 1141, 1143, 1141, 1141, 1145, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 
	1141, 1141, 1141, 1141, 1141, 1141, 1146, 1141, 
	1143, 1147, 1143, 1143, 1143, 1147, 1147, 1147, 
	1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 
	1147, 1147, 1147, 1147, 1147, 1147, 1147, 1143, 
	1147, 1148, 1149, 1150, 1151, 1152, 1154, 1153, 
	1155, 1157, 1158, 1158, 1158, 1157, 1158, 1158, 
	1158, 1158, 1159, 1160, 1159, 1159, 1159, 1158, 
	1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 
	1158, 1158, 1158, 1157, 1158, 1158, 1158, 1158, 
	1158, 1159, 1158, 1161, 1162, 1158, 1158, 1158, 
	1161, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 
	1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 
	1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158, 
	1158, 1158, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1158, 1163, 1158, 1158, 
	1156, 1158, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156, 
	1156, 1156, 1156, 1156, 1158, 1158, 1158, 1158, 
	1158, 1156, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 263, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 264, 1164, 1164, 1164, 
	1164, 263, 1164, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 1164, 1164, 1164, 
	1164, 262, 1164, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 262, 262, 262, 
	262, 262, 262, 262, 262, 1164, 1164, 1164, 
	1164, 1164, 262, 1159, 1165, 1159, 1159, 1159, 
	1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 
	1165, 1165, 1159, 1165, 1166, 1167, 1168, 1169, 
	1170, 1171, 1164, 1172, 1174, 1175, 1175, 1175, 
	1174, 1175, 1175, 1175, 1175, 1176, 1177, 1176, 
	1176, 1176, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1174, 1175, 
	1175, 1175, 1175, 1175, 1176, 1178, 1179, 1180, 
	1181, 1182, 1183, 1179, 1184, 1185, 1186, 1182, 
	1187, 1188, 1189, 1182, 1190, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1192, 1193, 
	1194, 1195, 1196, 1197, 1198, 1199, 1200, 1199, 
	1199, 1201, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1202, 
	1203, 1204, 1182, 1205, 1179, 1206, 1207, 1208, 
	1209, 1210, 1211, 1173, 1173, 1212, 1213, 1214, 
	1173, 1215, 1216, 1217, 1218, 1173, 1219, 1220, 
	1221, 1222, 1173, 1223, 1173, 1224, 1173, 1225, 
	1226, 1227, 1182, 1175, 1173, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 1228, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 272, 
	272, 272, 272, 272, 1228, 272, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	272, 272, 272, 272, 1173, 272, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	272, 272, 272, 272, 272, 1173, 1230, 1229, 
	1231, 1176, 1232, 1176, 1176, 1176, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1176, 1232, 1233, 1235, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1235, 1234, 1236, 1237, 
	1238, 1239, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 267, 267, 1240, 267, 1240, 
	267, 267, 1240, 1240, 267, 267, 267, 1241, 
	267, 267, 1242, 1242, 1242, 1242, 1242, 1242, 
	1242, 1242, 1242, 1242, 267, 267, 267, 267, 
	267, 267, 267, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 1240, 267, 1240, 
	1240, 275, 267, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 1240, 1240, 1240, 
	267, 1240, 275, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 1243, 1243, 
	1243, 1243, 275, 1243, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 1243, 1243, 
	1243, 1243, 1243, 275, 1242, 1242, 1242, 1242, 
	1242, 1242, 1242, 1242, 1242, 1242, 1243, 1244, 
	1234, 1182, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1245, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1244, 1234, 1246, 1247, 1182, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1244, 
	1234, 1244, 1248, 1234, 1250, 1249, 271, 271, 
	271, 271, 271, 271, 271, 271, 271, 271, 
	1249, 1187, 1251, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1253, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1254, 1252, 1252, 1252, 1252, 1252, 
	1253, 1252, 270, 270, 270, 270, 270, 270, 
	270, 270, 270, 270, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 
	1252, 269, 1252, 1256, 1255, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1258, 
	1255, 1259, 1260, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1261, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1262, 1255, 1255, 
	1255, 1255, 1255, 1255, 1263, 1255, 1255, 1258, 
	1255, 1259, 1260, 1255, 1255, 1255, 1264, 1255, 
	1255, 1255, 1255, 1255, 1261, 1255, 1255, 1265, 
	1255, 1255, 1255, 1255, 1255, 1262, 1255, 273, 
	273, 273, 273, 273, 273, 273, 273, 273, 
	273, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 
	1266, 1266, 1266, 1266, 1267, 1266, 1266, 1266, 
	1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 
	1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 
	1266, 1266, 1266, 1266, 1266, 1266, 1268, 1266, 
	1266, 1266, 1266, 1266, 1267, 1266, 1266, 1266, 
	1269, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 
	1266, 1270, 1266, 1271, 272, 1271, 272, 272, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 272, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1271, 1272, 1272, 1272, 1272, 1272, 
	1272, 1272, 1272, 1272, 1273, 1272, 1274, 1276, 
	1275, 1277, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1257, 1257, 1257, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1263, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1264, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1265, 1255, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1279, 1255, 1255, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1264, 
	1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 
	1265, 1255, 1281, 1281, 1281, 1281, 1281, 1281, 
	1281, 1281, 1281, 1281, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1282, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1283, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1284, 1280, 1281, 1281, 
	1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1285, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1283, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1284, 1280, 1283, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1284, 1280, 1286, 1288, 1287, 
	1289, 1291, 1291, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 
	1292, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1293, 1290, 1290, 1290, 1290, 1290, 
	1290, 1290, 1290, 1294, 1290, 1295, 1295, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1296, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1283, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1284, 
	1280, 1295, 1295, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1285, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1283, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1284, 1280, 1298, 1298, 1298, 
	1298, 1298, 1298, 1298, 1298, 1298, 1298, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1299, 1297, 1297, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1300, 1297, 
	1297, 1297, 1297, 1297, 1297, 1297, 1297, 1301, 
	1297, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 
	1303, 1303, 1303, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1304, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1305, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1306, 1302, 1308, 1308, 1308, 
	1308, 1308, 1308, 1308, 1308, 1308, 1308, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1308, 1308, 
	1308, 1308, 1308, 1308, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1309, 1307, 1308, 1308, 
	1308, 1308, 1308, 1308, 1307, 1307, 1310, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1311, 
	1307, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 
	1312, 1312, 1312, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1312, 1312, 1312, 1312, 1312, 1312, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1313, 1280, 1312, 1312, 1312, 1312, 1312, 1312, 
	1280, 1280, 1283, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1284, 1280, 1312, 1312, 1312, 
	1312, 1312, 1312, 1312, 1312, 1312, 1312, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1312, 1312, 
	1312, 1312, 1312, 1312, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1285, 1280, 1312, 1312, 
	1312, 1312, 1312, 1312, 1280, 1280, 1283, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1284, 
	1280, 1315, 1314, 1316, 1316, 1316, 1316, 1316, 
	1316, 1316, 1316, 1316, 1316, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1317, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1318, 1314, 1314, 1314, 1314, 1314, 
	1317, 1314, 1314, 1314, 1319, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1320, 1314, 1321, 
	1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 
	1321, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1322, 1314, 
	1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1319, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 
	1314, 1320, 1314, 1323, 1280, 1324, 1324, 1324, 
	1324, 1324, 1324, 1324, 1324, 1324, 1324, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1325, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1326, 1280, 1280, 1280, 
	1280, 1280, 1325, 1280, 1280, 1280, 1283, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1284, 
	1280, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 
	1324, 1324, 1324, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1285, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1283, 1280, 1280, 1280, 1280, 1280, 
	1280, 1280, 1280, 1284, 1280, 1245, 1251, 1182, 
	1327, 1234, 1235, 1234, 1328, 1235, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 
	1251, 1251, 1251, 1251, 1251, 1235, 1251, 1235, 
	1234, 1235, 1182, 1234, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 
	1240, 1240, 1240, 1240, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 1240, 1240, 
	1240, 1240, 1240, 1240, 1329, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 1240, 
	1240, 1240, 1240, 275, 1240, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 275, 
	275, 275, 275, 275, 275, 275, 275, 1240, 
	1240, 1240, 1240, 1240, 275, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 1228, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1330, 
	272, 272, 272, 272, 1228, 272, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	272, 272, 272, 272, 1199, 272, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	272, 272, 272, 272, 272, 1199, 1331, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1228, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1330, 1332, 1332, 1332, 1332, 1228, 1332, 
	1199, 1199, 1199, 1199, 1333, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1332, 1332, 1332, 1332, 1199, 1332, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1332, 1332, 1332, 1332, 1332, 1199, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1228, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1330, 1332, 1332, 1332, 1332, 1228, 
	1332, 1199, 1199, 1199, 1199, 1199, 1199, 1334, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1332, 1332, 1332, 1332, 1199, 
	1332, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1332, 1332, 1332, 1332, 1332, 
	1199, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1228, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1330, 1332, 1332, 1332, 1332, 
	1228, 1332, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1335, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1332, 1332, 1332, 1332, 
	1199, 1332, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1332, 1332, 1332, 1332, 
	1332, 1199, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1228, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1330, 1332, 1332, 1332, 
	1332, 1228, 1332, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1336, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1332, 1332, 1332, 
	1332, 1199, 1332, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1332, 1332, 1332, 
	1332, 1332, 1199, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1228, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1330, 1332, 1332, 
	1332, 1332, 1228, 1332, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1337, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1332, 1332, 
	1332, 1332, 1199, 1332, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1332, 1332, 
	1332, 1332, 1332, 1199, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1228, 1332, 1332, 
	1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 
	1332, 1332, 1332, 1332, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1330, 1332, 
	1332, 1332, 1332, 1228, 1332, 1199, 1199, 1199, 
	1336, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1332, 
	1332, 1332, 1332, 1199, 1332, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 
	1199, 1199, 1199, 1199, 1199, 1199, 1199, 1332, 
	1332, 1332, 1332, 1332, 1199, 1338, 1340, 1339, 
	1341, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1343, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1344, 
	1345, 1173, 1173, 1173, 1173, 1173, 1346, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1347, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1348, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1349, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1350, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1351, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1352, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1353, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1354, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1355, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1356, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1357, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1358, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1359, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1360, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1361, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1357, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1362, 
	1173, 1363, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1364, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1365, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1366, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1367, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1368, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1369, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1370, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1371, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1367, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1372, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1373, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1374, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1375, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1376, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1377, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1367, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1378, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1379, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1380, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1381, 1381, 1381, 
	1381, 1381, 1381, 1381, 1381, 1381, 277, 278, 
	277, 277, 277, 1381, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 1381, 1381, 277, 1228, 1381, 
	279, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 1381, 1381, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1381, 
	1381, 280, 1381, 1381, 1228, 1381, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1381, 281, 1381, 1381, 1173, 1381, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1381, 1381, 1381, 1381, 1381, 1173, 294, 295, 
	294, 294, 294, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 294, 293, 293, 
	296, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 299, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 298, 293, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1383, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1384, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1385, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1386, 1386, 1386, 
	1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 
	1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 
	1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 
	1386, 1386, 1386, 1386, 1386, 1386, 1228, 1386, 
	1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 
	1386, 1386, 1386, 1386, 1386, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1386, 
	1386, 1386, 1386, 1386, 1228, 1386, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1386, 1386, 1386, 1386, 1173, 1386, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1387, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1386, 1386, 1386, 1386, 1386, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1388, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1389, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1390, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1391, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1392, 1173, 
	1393, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1394, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1367, 1173, 1173, 1173, 1395, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1367, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1360, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1396, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1397, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1377, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1398, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1217, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1399, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1400, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1360, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1367, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1401, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1367, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1402, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1403, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1404, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1367, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1405, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1406, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1407, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1360, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1408, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1409, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1410, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1377, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1411, 1173, 1173, 1173, 1412, 1173, 1173, 1173, 
	1173, 1173, 1413, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1414, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1374, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1360, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1415, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1416, 
	1173, 1173, 1417, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1418, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1419, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1401, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1420, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1421, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1422, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1366, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1423, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1424, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1425, 1426, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1360, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1427, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1428, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1401, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1429, 1173, 1173, 1430, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1360, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1431, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1374, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1432, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1433, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1434, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1360, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1435, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1436, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1415, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1437, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1438, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1371, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1400, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1439, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1440, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1441, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1442, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1443, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1366, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1444, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1445, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1401, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1446, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1401, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1173, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1447, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1173, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1173, 1342, 1173, 1173, 
	1173, 1173, 1371, 1173, 1173, 1173, 1448, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1173, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1342, 1342, 1342, 1342, 1342, 1228, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1173, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1449, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1173, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1342, 1342, 1342, 1342, 1342, 1228, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1173, 1342, 
	1173, 1173, 1173, 1173, 1401, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1173, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1342, 1342, 1342, 1342, 1342, 1228, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1173, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1450, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1173, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1342, 1342, 1342, 1342, 1342, 
	1228, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1173, 1342, 1173, 1173, 1173, 1173, 1451, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1173, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1228, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1342, 1342, 1342, 1342, 
	1342, 1228, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1173, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1452, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1173, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1228, 1342, 1342, 1342, 
	1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 
	1342, 1342, 1342, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1342, 1342, 1342, 
	1342, 1342, 1228, 1342, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1173, 1342, 1173, 1173, 1173, 1415, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 
	1173, 1173, 1173, 1173, 1173, 1173, 1342, 1342, 
	1342, 1342, 1342, 1173, 1453, 1244, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1182, 1234, 1454, 1456, 
	1455, 1456, 1456, 1456, 1455, 1455, 1455, 1455, 
	1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455, 
	1455, 1455, 1455, 1455, 1455, 1455, 1456, 1455, 
	1455, 1455, 1455, 1455, 1457, 1455, 1455, 1455, 
	1455, 1455, 1455, 1455, 305, 1455, 303, 1458, 
	303, 303, 303, 1458, 1458, 1458, 1458, 1458, 
	1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 
	1458, 1458, 1458, 1458, 1458, 303, 1458, 1458, 
	1458, 1458, 1458, 304, 1458, 1458, 1458, 1458, 
	1458, 1458, 1458, 305, 1458, 306, 1458, 1460, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1461, 1459, 1460, 1459, 1460, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1463, 1459, 1460, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1464, 
	1459, 1460, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1459, 1459, 1459, 1459, 1459, 
	1459, 1459, 1459, 1465, 1459, 1467, 1465, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	172, 2, 3, 4, 178, 6, 7, 8, 
	9, 10, 172, 172, 181, 184, 181, 12, 
	185, 14, 181, 192, 193, 196, 197, 203, 
	198, 199, 200, 19, 201, 202, 205, 207, 
	208, 209, 210, 211, 25, 18, 194, 195, 
	27, 243, 244, 246, 248, 246, 30, 249, 
	32, 246, 256, 257, 260, 261, 267, 262, 
	263, 264, 37, 265, 266, 269, 271, 272, 
	273, 274, 275, 43, 36, 258, 259, 45, 
	307, 308, 315, 317, 315, 48, 318, 50, 
	320, 323, 320, 52, 324, 54, 330, 329, 
	0, 56, 331, 332, 58, 333, 334, 334, 
	334, 334, 460, 61, 62, 63, 460, 488, 
	64, 65, 488, 488, 492, 492, 69, 64, 
	70, 490, 491, 493, 494, 492, 488, 495, 
	496, 498, 66, 67, 499, 500, 68, 492, 
	71, 72, 76, 81, 88, 502, 503, 70, 
	490, 491, 493, 494, 492, 488, 495, 496, 
	498, 66, 67, 499, 500, 68, 71, 72, 
	76, 81, 88, 502, 503, 501, 73, 74, 
	75, 77, 78, 79, 80, 82, 83, 86, 
	84, 85, 87, 89, 90, 488, 92, 93, 
	95, 96, 97, 99, 102, 100, 101, 103, 
	105, 520, 520, 520, 521, 107, 523, 108, 
	524, 109, 521, 107, 523, 108, 524, 562, 
	562, 562, 112, 113, 114, 115, 573, 562, 
	562, 578, 562, 562, 599, 562, 119, 600, 
	606, 122, 125, 127, 129, 130, 131, 125, 
	126, 610, 126, 610, 128, 562, 624, 625, 
	628, 629, 635, 630, 631, 632, 136, 633, 
	634, 637, 639, 640, 641, 642, 643, 142, 
	135, 626, 627, 144, 679, 680, 146, 564, 
	110, 566, 148, 149, 682, 797, 151, 152, 
	153, 797, 805, 805, 805, 156, 826, 825, 
	805, 828, 830, 815, 862, 162, 163, 164, 
	168, 169, 162, 163, 164, 168, 169, 165, 
	165, 163, 164, 166, 167, 165, 165, 163, 
	164, 166, 167, 909, 163, 805, 994, 170, 
	171, 994, 994, 172, 172, 173, 174, 175, 
	177, 179, 180, 172, 172, 172, 176, 172, 
	176, 172, 1, 172, 172, 172, 5, 181, 
	181, 182, 181, 183, 186, 181, 181, 11, 
	13, 181, 181, 181, 187, 188, 189, 15, 
	21, 26, 212, 28, 181, 181, 181, 190, 
	191, 181, 16, 181, 181, 181, 17, 181, 
	181, 181, 20, 204, 206, 22, 181, 181, 
	23, 24, 181, 213, 217, 221, 214, 215, 
	216, 218, 219, 220, 181, 181, 222, 226, 
	232, 223, 230, 231, 224, 228, 229, 225, 
	227, 181, 233, 242, 241, 234, 235, 236, 
	237, 238, 239, 240, 181, 181, 181, 245, 
	246, 246, 246, 247, 250, 246, 29, 31, 
	246, 246, 246, 251, 252, 253, 33, 39, 
	44, 276, 46, 246, 246, 246, 254, 255, 
	246, 34, 246, 246, 246, 35, 246, 246, 
	246, 38, 268, 270, 40, 246, 246, 41, 
	42, 246, 277, 281, 285, 278, 279, 280, 
	282, 283, 284, 246, 246, 286, 290, 296, 
	287, 294, 295, 288, 292, 293, 289, 291, 
	246, 297, 306, 305, 298, 299, 300, 301, 
	302, 303, 304, 246, 246, 246, 309, 310, 
	310, 311, 310, 312, 310, 310, 310, 313, 
	313, 313, 314, 313, 313, 313, 315, 315, 
	315, 316, 315, 47, 49, 315, 315, 319, 
	319, 319, 320, 320, 321, 320, 322, 320, 
	320, 51, 53, 320, 320, 325, 325, 326, 
	325, 325, 327, 328, 327, 55, 57, 329, 
	329, 329, 335, 334, 334, 336, 337, 338, 
	339, 341, 344, 345, 346, 347, 334, 348, 
	349, 351, 353, 354, 355, 359, 361, 362, 
	363, 379, 384, 391, 396, 403, 410, 413, 
	414, 416, 420, 424, 412, 428, 435, 443, 
	447, 449, 454, 456, 459, 334, 334, 334, 
	334, 334, 334, 340, 334, 340, 334, 342, 
	59, 343, 334, 60, 334, 334, 350, 352, 
	334, 356, 357, 358, 354, 360, 334, 364, 
	365, 374, 377, 366, 367, 368, 369, 370, 
	371, 372, 373, 335, 375, 376, 378, 380, 
	383, 381, 382, 385, 388, 386, 387, 389, 
	390, 392, 394, 393, 395, 397, 398, 334, 
	399, 400, 401, 402, 334, 404, 407, 405, 
	406, 408, 409, 411, 415, 417, 418, 419, 
	421, 422, 423, 425, 427, 426, 429, 431, 
	430, 432, 433, 434, 436, 437, 438, 440, 
	439, 441, 442, 444, 445, 446, 448, 450, 
	451, 452, 453, 455, 457, 458, 461, 460, 
	460, 462, 463, 465, 460, 460, 460, 464, 
	460, 464, 466, 460, 468, 467, 467, 471, 
	472, 473, 474, 467, 476, 477, 478, 479, 
	481, 483, 484, 485, 486, 487, 467, 469, 
	467, 470, 467, 467, 467, 467, 467, 475, 
	467, 475, 480, 467, 482, 467, 488, 488, 
	489, 504, 505, 491, 507, 508, 495, 509, 
	510, 511, 512, 513, 515, 516, 517, 518, 
	519, 488, 488, 488, 488, 488, 488, 492, 
	497, 488, 488, 488, 488, 488, 488, 488, 
	488, 488, 506, 488, 506, 488, 488, 488, 
	488, 514, 488, 91, 94, 98, 104, 520, 
	522, 525, 106, 520, 520, 521, 526, 526, 
	527, 528, 530, 532, 533, 526, 526, 529, 
	526, 529, 526, 531, 526, 526, 526, 535, 
	534, 534, 536, 537, 538, 540, 542, 543, 
	547, 552, 559, 534, 534, 534, 534, 539, 
	534, 539, 534, 541, 534, 534, 535, 544, 
	545, 546, 548, 549, 550, 551, 553, 554, 
	557, 555, 556, 558, 560, 561, 563, 562, 
	571, 572, 574, 575, 577, 579, 580, 581, 
	583, 584, 585, 587, 588, 609, 612, 613, 
	614, 682, 683, 684, 685, 686, 582, 688, 
	704, 709, 716, 721, 723, 729, 732, 733, 
	735, 739, 743, 731, 747, 755, 766, 770, 
	773, 781, 785, 788, 789, 562, 110, 565, 
	562, 562, 567, 569, 570, 562, 568, 562, 
	562, 562, 562, 562, 111, 562, 562, 562, 
	562, 562, 576, 562, 576, 562, 562, 116, 
	562, 562, 117, 562, 562, 582, 562, 586, 
	562, 589, 598, 562, 118, 601, 602, 603, 
	562, 604, 120, 607, 121, 123, 608, 562, 
	590, 592, 562, 591, 562, 562, 593, 596, 
	597, 562, 594, 595, 562, 562, 562, 562, 
	605, 124, 611, 562, 562, 615, 562, 562, 
	562, 616, 618, 562, 617, 562, 617, 562, 
	619, 620, 621, 132, 138, 143, 644, 145, 
	562, 562, 562, 622, 623, 562, 133, 562, 
	562, 562, 134, 562, 562, 562, 137, 636, 
	638, 139, 562, 562, 140, 141, 562, 645, 
	649, 653, 646, 647, 648, 650, 651, 652, 
	562, 562, 654, 658, 664, 655, 662, 663, 
	656, 660, 661, 657, 659, 562, 665, 673, 
	678, 666, 667, 668, 669, 670, 671, 672, 
	674, 675, 676, 677, 562, 562, 562, 681, 
	147, 150, 562, 687, 562, 689, 690, 699, 
	702, 691, 692, 693, 694, 695, 696, 697, 
	698, 563, 700, 701, 703, 705, 708, 706, 
	707, 710, 713, 711, 712, 714, 715, 717, 
	719, 718, 720, 722, 724, 726, 725, 727, 
	728, 730, 563, 734, 736, 737, 738, 740, 
	741, 742, 744, 746, 745, 748, 751, 749, 
	750, 752, 753, 754, 756, 757, 758, 763, 
	759, 760, 761, 562, 563, 564, 110, 762, 
	569, 764, 765, 767, 768, 769, 771, 772, 
	774, 775, 776, 779, 777, 778, 780, 782, 
	783, 784, 786, 787, 562, 790, 790, 791, 
	792, 793, 795, 790, 790, 790, 794, 790, 
	794, 790, 796, 790, 798, 797, 797, 799, 
	800, 797, 801, 803, 797, 797, 797, 797, 
	802, 797, 802, 804, 797, 806, 805, 805, 
	809, 810, 811, 805, 812, 814, 817, 818, 
	819, 820, 821, 805, 822, 823, 827, 850, 
	854, 805, 855, 857, 859, 805, 860, 861, 
	863, 867, 869, 870, 805, 872, 890, 895, 
	902, 910, 917, 924, 929, 930, 934, 938, 
	942, 928, 947, 955, 965, 971, 974, 983, 
	987, 991, 992, 993, 807, 805, 808, 805, 
	805, 805, 805, 805, 805, 813, 805, 813, 
	805, 154, 816, 805, 805, 805, 805, 805, 
	805, 805, 824, 805, 805, 155, 157, 805, 
	158, 834, 842, 845, 829, 846, 847, 835, 
	839, 840, 805, 829, 158, 831, 832, 159, 
	805, 831, 805, 805, 833, 805, 836, 838, 
	805, 836, 837, 839, 840, 838, 805, 805, 
	841, 805, 805, 843, 838, 839, 840, 843, 
	844, 805, 836, 838, 839, 840, 805, 836, 
	838, 839, 840, 805, 848, 838, 839, 840, 
	848, 849, 805, 158, 850, 829, 851, 839, 
	840, 852, 838, 158, 852, 829, 853, 856, 
	858, 160, 161, 805, 805, 864, 865, 866, 
	861, 868, 805, 805, 871, 805, 805, 873, 
	874, 883, 888, 875, 876, 877, 878, 879, 
	880, 881, 882, 806, 884, 885, 886, 887, 
	806, 889, 891, 894, 892, 893, 806, 806, 
	896, 899, 897, 898, 900, 901, 806, 903, 
	905, 904, 906, 907, 908, 805, 805, 911, 
	806, 912, 805, 913, 914, 915, 916, 807, 
	918, 921, 919, 920, 922, 923, 925, 926, 
	927, 806, 931, 932, 933, 935, 936, 937, 
	939, 940, 941, 943, 945, 946, 944, 806, 
	948, 951, 949, 950, 952, 953, 954, 956, 
	957, 958, 961, 959, 960, 962, 963, 964, 
	966, 968, 967, 969, 970, 972, 973, 975, 
	976, 978, 981, 977, 979, 980, 982, 984, 
	985, 986, 988, 989, 990, 805, 805, 994, 
	995, 996, 994, 998, 997, 999, 997, 1000, 
	1001, 1002, 997, 997
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	14, 0, 15, 0, 0, 0, 0, 16, 
	0, 0, 0, 0, 0, 0, 17, 18, 
	19, 20, 21, 0, 0, 0, 22, 23, 
	0, 0, 24, 25, 26, 27, 28, 29, 
	29, 30, 31, 29, 32, 31, 33, 31, 
	29, 29, 30, 29, 34, 29, 29, 35, 
	29, 29, 29, 29, 29, 29, 29, 0, 
	36, 37, 0, 38, 37, 39, 37, 0, 
	0, 36, 0, 40, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 41, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 42, 43, 44, 45, 0, 0, 0, 
	45, 28, 46, 29, 29, 29, 46, 47, 
	48, 49, 0, 0, 0, 0, 0, 50, 
	51, 0, 52, 53, 0, 54, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 55, 
	55, 56, 0, 28, 0, 57, 0, 7, 
	0, 8, 0, 7, 0, 0, 0, 0, 
	8, 7, 0, 8, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 58, 
	0, 0, 0, 0, 58, 59, 0, 0, 
	0, 60, 61, 62, 63, 0, 7, 7, 
	64, 65, 65, 0, 0, 0, 28, 0, 
	0, 0, 29, 66, 29, 29, 29, 67, 
	68, 69, 68, 68, 68, 0, 70, 71, 
	70, 70, 70, 72, 73, 74, 75, 0, 
	76, 77, 78, 81, 82, 0, 28, 0, 
	7, 0, 7, 83, 84, 85, 67, 86, 
	0, 87, 0, 88, 89, 90, 0, 91, 
	92, 0, 93, 7, 7, 94, 95, 0, 
	0, 96, 97, 98, 99, 99, 99, 99, 
	99, 99, 99, 99, 100, 101, 102, 0, 
	0, 103, 0, 104, 105, 106, 0, 107, 
	108, 109, 0, 7, 0, 0, 110, 111, 
	0, 28, 112, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 113, 114, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 115, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 116, 117, 118, 0, 
	119, 120, 121, 7, 7, 122, 0, 0, 
	123, 124, 125, 99, 99, 99, 99, 99, 
	99, 99, 99, 126, 127, 128, 0, 0, 
	129, 0, 130, 131, 132, 0, 133, 134, 
	135, 0, 7, 0, 0, 136, 137, 0, 
	28, 138, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 139, 140, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	141, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 142, 143, 144, 0, 145, 
	146, 0, 147, 0, 148, 149, 150, 151, 
	152, 153, 0, 154, 155, 156, 157, 158, 
	159, 7, 160, 0, 0, 161, 162, 163, 
	164, 165, 166, 167, 0, 168, 7, 169, 
	170, 0, 0, 171, 172, 173, 174, 0, 
	175, 176, 177, 0, 178, 0, 0, 179, 
	180, 181, 182, 183, 184, 0, 28, 0, 
	0, 7, 7, 0, 0, 0, 185, 0, 
	0, 0, 0, 186, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 187, 188, 189, 
	190, 191, 192, 67, 193, 0, 194, 0, 
	0, 0, 195, 0, 196, 197, 0, 0, 
	198, 0, 0, 0, 199, 0, 200, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 199, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 201, 
	0, 0, 0, 0, 202, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 7, 203, 
	204, 0, 0, 0, 205, 206, 207, 67, 
	208, 0, 28, 209, 0, 210, 211, 0, 
	28, 0, 0, 212, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 213, 0, 
	214, 0, 215, 216, 217, 218, 219, 67, 
	220, 0, 0, 221, 0, 222, 223, 224, 
	225, 28, 0, 27, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 7, 7, 7, 
	7, 226, 227, 228, 229, 230, 231, 232, 
	0, 233, 234, 235, 236, 237, 238, 239, 
	240, 241, 67, 242, 0, 243, 244, 245, 
	246, 247, 248, 0, 0, 0, 0, 249, 
	7, 7, 0, 250, 251, 252, 253, 254, 
	0, 0, 0, 0, 0, 255, 256, 67, 
	257, 0, 258, 28, 259, 260, 261, 262, 
	263, 264, 0, 28, 0, 0, 0, 0, 
	0, 0, 0, 265, 266, 267, 268, 67, 
	269, 0, 270, 28, 271, 272, 273, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 274, 275, 
	0, 8, 0, 0, 7, 276, 0, 0, 
	0, 0, 0, 0, 7, 7, 0, 277, 
	0, 277, 277, 277, 0, 0, 277, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 0, 277, 278, 279, 0, 
	280, 281, 0, 58, 0, 282, 0, 283, 
	284, 285, 286, 287, 29, 288, 289, 290, 
	291, 292, 67, 293, 0, 294, 295, 0, 
	296, 297, 0, 298, 299, 276, 300, 0, 
	301, 0, 0, 302, 0, 0, 0, 0, 
	303, 0, 0, 0, 0, 0, 0, 304, 
	0, 0, 305, 0, 306, 307, 0, 0, 
	0, 308, 0, 0, 309, 310, 311, 312, 
	0, 0, 0, 313, 314, 0, 315, 316, 
	317, 0, 7, 318, 319, 320, 0, 321, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	322, 323, 324, 0, 0, 325, 0, 326, 
	327, 328, 0, 329, 330, 331, 0, 7, 
	0, 0, 332, 333, 0, 28, 334, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	335, 336, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 337, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 338, 339, 340, 0, 
	0, 0, 341, 28, 342, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 58, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 343, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 344, 345, 346, 347, 348, 348, 
	344, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 274, 274, 274, 274, 
	274, 274, 274, 274, 349, 350, 351, 0, 
	28, 0, 0, 352, 353, 354, 67, 355, 
	0, 356, 28, 357, 7, 358, 359, 0, 
	28, 360, 0, 0, 361, 362, 363, 364, 
	67, 365, 0, 28, 366, 367, 368, 369, 
	0, 28, 0, 370, 0, 7, 0, 0, 
	0, 0, 0, 371, 0, 0, 372, 372, 
	0, 373, 0, 0, 0, 374, 7, 375, 
	375, 375, 0, 0, 376, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 377, 378, 0, 379, 
	380, 381, 382, 383, 384, 67, 385, 0, 
	386, 0, 0, 387, 388, 389, 390, 391, 
	392, 393, 0, 394, 395, 0, 0, 396, 
	397, 398, 0, 0, 399, 0, 0, 398, 
	400, 400, 401, 402, 0, 403, 403, 0, 
	404, 405, 406, 407, 0, 408, 398, 398, 
	409, 0, 0, 410, 410, 0, 411, 412, 
	0, 413, 414, 415, 415, 416, 416, 0, 
	0, 417, 418, 418, 419, 419, 420, 421, 
	421, 422, 422, 423, 424, 424, 425, 425, 
	0, 0, 426, 427, 428, 429, 430, 431, 
	431, 428, 430, 432, 372, 433, 0, 0, 
	0, 0, 0, 434, 435, 375, 375, 375, 
	436, 375, 437, 438, 28, 439, 440, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 441, 0, 0, 0, 0, 
	436, 0, 0, 0, 0, 0, 442, 443, 
	0, 0, 0, 0, 0, 0, 444, 0, 
	0, 0, 0, 0, 443, 445, 446, 0, 
	447, 0, 448, 0, 0, 0, 0, 449, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 450, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 449, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 451, 452, 453, 
	7, 76, 454, 0, 455, 0, 456, 0, 
	0, 0, 457, 458
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 79, 0, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 79, 0, 79, 0, 0, 0, 79, 
	79, 0, 0, 0, 0, 79, 0, 79, 
	0, 79, 0, 0, 0, 0, 79, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 79, 0, 0, 0, 
	0, 0, 0, 79, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	79, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	79, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 79, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 79, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	0, 0, 0, 0, 0, 79, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 79, 0, 0, 79, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 80, 0, 0, 0, 
	0, 0, 0, 0, 0, 80, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 80, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 80, 0, 
	0, 80, 0, 80, 0, 0, 0, 80, 
	80, 0, 0, 0, 0, 80, 0, 80, 
	0, 80, 0, 0, 0, 0, 80, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 80, 0, 0, 0, 
	0, 0, 0, 80, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	80, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	80, 0, 0, 0, 0, 0, 80, 0, 
	0, 0, 0, 0, 0, 0, 80, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 80, 0, 
	0, 0, 0, 0, 0, 80, 0, 0, 
	0, 0, 0, 0, 0, 80, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 80, 0, 0, 80, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 81, 81, 81, 81, 0, 
	0, 0, 0, 95, 97, 99, 99, 99, 
	104, 104, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 174, 174, 174, 174, 174, 
	174, 174, 174, 174, 174, 174, 174, 174, 
	174, 174, 186, 188, 188, 188, 200, 202, 
	202, 202, 202, 202, 208, 200, 212, 212, 
	212, 212, 212, 212, 212, 212, 212, 212, 
	212, 212, 212, 212, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 200, 212, 212, 212, 212, 262, 
	262, 262, 267, 269, 269, 269, 273, 273, 
	267, 273, 273, 273, 273, 273, 273, 273, 
	273, 273, 303, 303, 0, 316, 317, 318, 
	320, 322, 324, 322, 322, 0, 334, 335, 
	339, 339, 340, 349, 350, 351, 351, 351, 
	354, 354, 356, 357, 358, 358, 358, 360, 
	361, 362, 362, 358, 354, 354, 367, 368, 
	368, 368, 368, 368, 371, 371, 371, 371, 
	371, 371, 371, 371, 381, 382, 382, 382, 
	382, 394, 394, 394, 382, 382, 382, 382, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 405, 394, 406, 407, 407, 0, 414, 
	418, 418, 419, 428, 429, 430, 430, 430, 
	433, 433, 435, 436, 437, 437, 437, 439, 
	440, 441, 441, 437, 433, 433, 446, 447, 
	447, 447, 447, 447, 450, 450, 450, 450, 
	450, 450, 450, 450, 460, 461, 461, 461, 
	461, 473, 473, 473, 461, 461, 461, 461, 
	473, 473, 473, 473, 473, 473, 473, 473, 
	473, 484, 473, 485, 486, 486, 0, 493, 
	494, 0, 500, 0, 507, 511, 511, 0, 
	0, 520, 521, 525, 525, 0, 530, 0, 
	533, 0, 536, 536, 537, 538, 0, 582, 
	584, 585, 586, 587, 589, 591, 595, 595, 
	586, 586, 586, 586, 597, 586, 586, 591, 
	586, 586, 582, 601, 601, 601, 601, 601, 
	601, 591, 591, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 640, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 607, 607, 607, 607, 607, 
	607, 607, 607, 586, 0, 693, 694, 695, 
	697, 693, 700, 0, 719, 721, 723, 724, 
	725, 726, 727, 729, 726, 726, 726, 726, 
	726, 732, 726, 726, 734, 732, 732, 726, 
	0, 754, 755, 104, 104, 758, 759, 104, 
	755, 755, 762, 764, 767, 755, 768, 755, 
	769, 770, 772, 774, 755, 762, 775, 775, 
	764, 775, 779, 775, 775, 775, 775, 775, 
	0, 186, 788, 789, 788, 788, 0, 798, 
	799, 801, 803, 805, 803, 807, 0, 820, 
	821, 822, 823, 825, 827, 829, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 0, 200, 894, 897, 898, 902, 
	904, 905, 906, 907, 908, 910, 913, 914, 
	916, 918, 921, 922, 924, 925, 200, 922, 
	922, 913, 913, 913, 913, 944, 947, 949, 
	950, 954, 957, 958, 959, 960, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 913, 964, 913, 913, 913, 965, 972, 
	972, 974, 976, 985, 986, 987, 987, 987, 
	990, 990, 992, 993, 994, 994, 994, 996, 
	997, 998, 998, 994, 990, 990, 1003, 1004, 
	1004, 1004, 1004, 1004, 1007, 1007, 1007, 1007, 
	1007, 1007, 1007, 1007, 1017, 1018, 1018, 1018, 
	1018, 1030, 1030, 1030, 1018, 1018, 1018, 1018, 
	1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 
	1030, 1030, 1030, 1030, 1030, 1030, 1045, 1046, 
	1047, 1047, 200, 913, 913, 1051, 913, 908, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1116, 898, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 
	1053, 1053, 1053, 1053, 1141, 913, 0, 1148, 
	1149, 1150, 1152, 1154, 1156, 0, 1165, 1166, 
	1167, 1168, 1170, 1165, 1173, 0, 273, 1230, 
	1232, 1233, 1234, 1235, 1237, 1239, 1241, 1244, 
	1244, 1235, 1235, 1247, 1248, 1235, 1235, 1250, 
	1252, 1253, 1253, 1256, 1267, 273, 1273, 1275, 
	1276, 1278, 1256, 1256, 1281, 1281, 1281, 1287, 
	1288, 1290, 1291, 1281, 1281, 1298, 1303, 1308, 
	1281, 1281, 1315, 1315, 1281, 1281, 1252, 1235, 
	1235, 1252, 1235, 1235, 1241, 273, 1332, 1333, 
	1333, 1333, 1333, 1333, 1333, 1339, 1241, 1342, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1382, 1383, 1343, 1343, 
	1387, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 
	1343, 1343, 1343, 1343, 1343, 1343, 1343, 1454, 
	1235, 1455, 0, 1459, 1459, 0, 1463, 1463, 
	1463, 1463, 1467
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 172;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 181;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 246;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 310;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 313;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 315;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 319;
class << self
	attr_accessor :lex_en_interp_backslash_delimited_words
end
self.lex_en_interp_backslash_delimited_words = 320;
class << self
	attr_accessor :lex_en_plain_backslash_delimited_words
end
self.lex_en_plain_backslash_delimited_words = 325;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 327;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 329;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 334;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 460;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 467;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 488;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 520;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 526;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 534;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 562;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 790;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 797;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 805;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 994;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 997;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 172;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    ?a.ord => "\a", ?b.ord  => "\b", ?e.ord => "\e", ?f.ord => "\f",
    ?n.ord => "\n", ?r.ord  => "\r", ?s.ord => "\s", ?t.ord => "\t",
    ?v.ord => "\v", ?\\.ord => "\\"
  }.freeze

  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze

  RBRACE_OR_RBRACK = %w"} ]".freeze

  attr_reader   :source_buffer

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source_pts    = nil # @source as a codepoint array

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_state = false

    # True at the end of "def foo a:"
    @in_kwarg      = false
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      source = @source_buffer.source

      if defined?(Encoding) && source.encoding == Encoding::UTF_8
        @source_pts = source.unpack('U*')
      else
        @source_pts = source.unpack('C*')
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source_pts = nil
    end
  end

  def encoding
    @source_buffer.source.encoding
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    @command_state = (@cs == klass.lex_en_expr_value ||
                      @cs == klass.lex_en_line_begin)

    
# line 11813 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 80 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 11841 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= ( (@source_pts[p] || 0)) && 
			( (@source_pts[p] || 0)) <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + ( (@source_pts[p] || 0)) - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 28 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 99 then
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 29 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 67 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 70 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 279 then
# line 1183 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1452 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 38 then
# line 1468 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 40 then
# line 1496 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 55 then
# line 1689 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
	when 319 then
# line 1743 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 348 then
# line 1816 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 424 then
# line 2036 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 418 then
# line 2037 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 421 then
# line 2038 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 415 then
# line 2039 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 430 then
# line 2040 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 398 then
# line 2041 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 410 then
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 405 then
# line 2099 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 403 then
# line 2100 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 76 then
# line 2235 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 96 then
# line 1024 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 797
		_goto_level = _again
		next
	end

   end
		end
	when 5 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 92 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 91 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 97 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 94 then
# line 956 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 95 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 856 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 832 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 123 then
# line 1024 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 797
		_goto_level = _again
		next
	end

   end
		end
	when 10 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 120 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 119 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 124 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 122 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 856 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 832 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 146 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 145 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 148 then
# line 956 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 149 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 152 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 151 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 154 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 161 then
# line 1024 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 797
		_goto_level = _again
		next
	end

   end
		end
	when 13 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 158 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 157 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 162 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 160 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 832 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 164 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 163 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 171 then
# line 1024 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{'.freeze)

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 797
		_goto_level = _again
		next
	end

   end
		end
	when 15 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 167 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 166 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 172 then
# line 969 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end

   end
		end
	when 169 then
# line 956 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 170 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 14 then
# line 832 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 174 then
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 173 then
# line 832 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source_buffer.slice(@te...@te+2)
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 790;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 176 then
# line 956 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 177 then
# line 1114 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 178 then
# line 1102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 16 then
# line 1242 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 179 then
# line 1242 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 181 then
# line 1255 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 180 then
# line 1265 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 202 then
# line 1286 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 188 then
# line 1294 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 18 then
# line 1298 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 805; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end
  end
		end
	when 185 then
# line 1307 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 197 then
# line 1311 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1317 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if version?(23)
          type, delimiter = tok[0..-2], tok[-1].chr
          	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

        else
          p = @ts - 1
          	begin
		 @cs = 805
		_goto_level = _again
		next
	end

        end
       end
		end
	when 184 then
# line 1330 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 183 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 201 then
# line 1286 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 198 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 200 then
# line 1294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 195 then
# line 1298 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 805; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end
  end
		end
	when 191 then
# line 1307 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 196 then
# line 1314 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 189 then
# line 1327 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 194 then
# line 1330 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1307 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit_table(PUNCTUATION)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 17 then
# line 1330 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 187 then
# line 1 "NONE"
		begin
	case  @act
	when 39 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 40 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 41 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 22 then
# line 1342 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           p = p - 1;  @cs = 790; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 204 then
# line 1348 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 203 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 206 then
# line 1345 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 205 then
# line 1348 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1348 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 212 then
# line 1374 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 211 then
# line 1380 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 210 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 222 then
# line 1359 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 213 then
# line 1363 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 218 then
# line 1374 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 216 then
# line 1377 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 221 then
# line 1380 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 245 then
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 228 then
# line 1456 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 562
		_goto_level = _again
		next
	end

       end
		end
	when 234 then
# line 1480 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 24 then
# line 1488 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 236 then
# line 1497 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 39 then
# line 1506 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 223 then
# line 1520 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 224 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 235 then
# line 1447 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 231 then
# line 1469 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 562
		_goto_level = _again
		next
	end

       end
		end
	when 233 then
# line 1485 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 227 then
# line 1506 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 226 then
# line 1511 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 244 then
# line 1520 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 25 then
# line 1511 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 41 then
# line 1520 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 23 then
# line 1 "NONE"
		begin
	case  @act
	when 67 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'.freeze
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 562
		_goto_level = _again
		next
	end

      end
	when 68 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 562
		_goto_level = _again
		next
	end

      end
	when 73 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 43 then
# line 1556 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 488
		_goto_level = _again
		next
	end
  end
		end
	when 249 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 250 then
# line 1556 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 488
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1556 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 488
		_goto_level = _again
		next
	end
  end
		end
	when 42 then
# line 1 "NONE"
		begin
	case  @act
	when 80 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do'.freeze, @te - 2, @te)
        else
          emit(:kDO, 'do'.freeze, @te - 2, @te)
        end
         @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 81 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 488
		_goto_level = _again
		next
	end
 end
end 
			end
	when 260 then
# line 1590 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 253 then
# line 1596 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 254 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 255 then
# line 1593 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 258 then
# line 1596 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 264 then
# line 1620 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 263 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 272 then
# line 1612 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 266 then
# line 1614 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 270 then
# line 1620 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 265 then
# line 1 "NONE"
		begin
	case  @act
	when 88 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 89 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
 end
end 
			end
	when 300 then
# line 1637 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;
        if tok.start_with? '-'.freeze
          emit(:tUMINUS_NUM, '-'.freeze, @ts, @ts + 1)
           @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 301 then
# line 1657 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 295 then
# line 1664 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source_buffer.slice(@ts).chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 51 then
# line 1671 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 302 then
# line 1717 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 54 then
# line 1731 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 316 then
# line 1762 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 315 then
# line 1772 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 303 then
# line 1811 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 48 then
# line 1831 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source_buffer.slice(@ts) =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 805;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 790;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 289 then
# line 1877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 172
		_goto_level = _again
		next
	end
  end
		end
	when 52 then
# line 1890 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 275 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 299 then
# line 1647 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR, '*'.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 296 then
# line 1671 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 294 then
# line 1677 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 304 then
# line 1731 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 314 then
# line 1772 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 320 then
# line 1778 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 297 then
# line 1811 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 342 then
# line 1227 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 286 then
# line 1874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 288 then
# line 1877 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 172
		_goto_level = _again
		next
	end
  end
		end
	when 291 then
# line 1890 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 50 then
# line 1677 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 57 then
# line 1745 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 49 then
# line 1874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 53 then
# line 1890 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 47 then
# line 1 "NONE"
		begin
	case  @act
	when 111 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 112 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 534; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 113 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 115 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
 end
	when 116 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 119 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
 end
end 
			end
	when 350 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 351 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 352 then
# line 1898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 356 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 60 then
# line 1920 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 360 then
# line 1925 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 359 then
# line 1935 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 358 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 362 then
# line 1929 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 361 then
# line 1935 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 59 then
# line 1935 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 562
		_goto_level = _again
		next
	end
  end
		end
	when 392 then
# line 1946 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, '->'.freeze, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 74 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 370 then
# line 2120 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 62 then
# line 2138 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end
  end
		end
	when 389 then
# line 2145 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 383 then
# line 2172 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 376 then
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 526;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 388 then
# line 2190 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 374 then
# line 2194 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH, '?'.freeze)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 371 then
# line 2202 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 373 then
# line 2215 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI, ';'.freeze)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 438 then
# line 2218 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 369 then
# line 2224 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 368 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 448 then
# line 1979 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 334; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 446 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 445 then
# line 1994 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  
           emit_table(KEYWORDS)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 395 then
# line 2070 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 435 then
# line 2130 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 387 then
# line 2138 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 329
		_goto_level = _again
		next
	end
  end
		end
	when 393 then
# line 2145 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 467; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 440 then
# line 1227 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 382 then
# line 2172 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 394 then
# line 2202 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 380 then
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 386 then
# line 2224 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 63 then
# line 2070 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 61 then
# line 2224 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 64 then
# line 1 "NONE"
		begin
	case  @act
	when 132 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 133 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 334; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 134 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 135 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 136 then
	begin begin p = (( @te))-1; end
 
           emit_table(KEYWORDS)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 137 then
	begin begin p = (( @te))-1; end

           emit_table(KEYWORDS)
            @cs = 534; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 138 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 139 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 140 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 141 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 143 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 144 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 145 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 147 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 151 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 152 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 78 then
# line 2236 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 453 then
# line 2239 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 172; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 454 then
# line 2239 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 172; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 75 then
# line 2239 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 172; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 457 then
# line 2249 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 172
		_goto_level = _again
		next
	end

       end
		end
	when 456 then
# line 2257 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 89 then
# line 2267 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 997
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2271 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 81 then
# line 2274 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 797
		_goto_level = _again
		next
	end
  end
		end
	when 82 then
# line 529 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 83 then
# line 2264 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 88 then
# line 2267 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 997
		_goto_level = _again
		next
	end
  end
		end
	when 87 then
# line 2274 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 797
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2274 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 797
		_goto_level = _again
		next
	end
  end
		end
	when 73 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 93 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 121 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 147 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 153 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 159 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 165 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 168 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 175 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 246 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 237 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1497 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 229 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1506 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 317 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1762 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source_buffer.slice(@ts + 1)]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 290 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1877 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 172
		_goto_level = _again
		next
	end
  end
		end
	when 458 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2249 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 172
		_goto_level = _again
		next
	end

       end
		end
	when 455 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2254 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 90 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2267 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 997
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2271 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 412 then
# line 637 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 411 then
# line 638 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 413 then
# line 639 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 406 then
# line 643 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 407 then
# line 647 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 408 then
# line 648 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 116 then
# line 663 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 142 then
# line 663 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 338 then
# line 663 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 100 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 126 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 322 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 103 then
# line 690 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 129 then
# line 690 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 325 then
# line 690 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 105 then
# line 709 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 131 then
# line 709 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 327 then
# line 709 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 102 then
# line 716 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 128 then
# line 716 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 324 then
# line 716 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 118 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 144 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 340 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 113 then
# line 724 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 139 then
# line 724 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 335 then
# line 724 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 117 then
# line 728 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 143 then
# line 728 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 339 then
# line 728 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 112 then
# line 740 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 138 then
# line 740 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 334 then
# line 740 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 115 then
# line 751 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 141 then
# line 751 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 337 then
# line 751 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 101 then
# line 777 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 127 then
# line 777 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 323 then
# line 777 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 150 then
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 155 then
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 66 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 30 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1452 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1468 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1496 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 190 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1327 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 209 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1345 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 217 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1377 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 33 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1506 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 805
		_goto_level = _again
		next
	end

       end
		end
	when 248 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1511 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 240 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1517 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 259 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1593 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 271 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1614 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 267 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1617 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 287 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 357 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 353 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1901 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 172
		_goto_level = _again
		next
	end

      end
     end
		end
	when 366 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1929 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 363 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1932 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 172
		_goto_level = _again
		next
	end
  end
		end
	when 439 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 381 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 994
		_goto_level = _again
		next
	end
  end
		end
	when 84 then
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2264 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 239 then
# line 994 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1421 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          p = @ts - 1
          	begin
		 @cs = 805
		_goto_level = _again
		next
	end

        else
          emit(:tLCURLY, '{'.freeze, @te - 1, @te)
           @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 261 then
# line 994 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE_ARG, '{'.freeze)
        end
         @cs = 797;
       end
		end
	when 349 then
# line 994 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1789 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG, '{'.freeze)
        else
          emit(:tLBRACE, '{'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 451 then
# line 994 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1954 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 452 then
# line 1003 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}'.freeze, p - 1, p)
        else
          emit(:tSTRING_DEND, '}'.freeze, p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end

        p = p - 1;
         @cs = (stack_pop);
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 526;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 68 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 71 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 193 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1327 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 208 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1345 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 220 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1377 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 242 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 257 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1593 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 269 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1614 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 293 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 355 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 365 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1929 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 385 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 86 then
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2264 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 214 then
# line 1183 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1367 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 305 then
# line 1183 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 278 then
# line 1183 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 378 then
# line 1183 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 132 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'.freeze
            emit(:tLAMBEG, '{'.freeze)
          else # 'do'
            emit(:kDO_LAMBDA, 'do'.freeze)
          end
        else
          if tok == '{'.freeze
            emit(:tLCURLY, '{'.freeze)
          else # 'do'
            emit_do
          end
        end

         @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 133 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 334; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 134 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class'.freeze, @ts, @ts + 5)
           emit(:tLSHFT, '<<'.freeze,    @te - 2, @te)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 135 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 136 then
	begin begin p = (( @te))-1; end
 
           emit_table(KEYWORDS)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 137 then
	begin begin p = (( @te))-1; end

           emit_table(KEYWORDS)
            @cs = 534; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 138 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'.freeze
           @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 139 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__, '__ENCODING__'.freeze)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 140 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 141 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 143 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 144 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f, @ts, @te - 1)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 145 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 147 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 151 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 152 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 215 then
# line 1184 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1367 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 306 then
# line 1184 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 280 then
# line 1184 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 379 then
# line 1184 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2152 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 488; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 307 then
# line 1189 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 281 then
# line 1189 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 308 then
# line 1190 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 282 then
# line 1190 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 312 then
# line 1191 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 285 then
# line 1191 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 311 then
# line 1192 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 284 then
# line 1192 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 111 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 112 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 534; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 113 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 115 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
 end
	when 116 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 460; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 119 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
 end
end 
			end
	when 309 then
# line 1193 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 283 then
# line 1193 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 310 then
# line 1198 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1723 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 434 then
# line 1203 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 238 then
# line 1209 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1415 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze, @te - 1, @te)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 341 then
# line 1209 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1801 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '['.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 437 then
# line 1209 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2198 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2, '['.freeze)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 230 then
# line 1216 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1396 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '('.freeze, @te - 1, @te)
           @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
           @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 243 then
# line 1216 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1409 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2, '('.freeze)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 251 then
# line 1216 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1533 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '('.freeze, @te - 1, @te)
        if version?(18)
           @cs = 797; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 298 then
# line 1216 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1806 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN, '('.freeze)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 390 then
# line 1216 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2172 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 391 then
# line 1222 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2176 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 526;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 56 then
# line 1689 "lib/parser/lexer.rl"
		begin
 heredoc_e      = p 		end
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 313 then
# line 1690 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1691 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  $3.empty? ? '<<"'.freeze : ('<<'.freeze + $3)
        delimiter   =  $4

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<'.freeze, @ts, @ts + 2)
          p = @ts + 1
           @cs = 562; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          @herebody_s ||= new_herebody_s
          p = @herebody_s - 1
        end
       end
		end
	when 318 then
# line 1743 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 345 then
# line 1816 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1817 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, 'rescue'.freeze, @ts, tm)
           p = tm - 1
            @cs = 534; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 425 then
# line 2036 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 419 then
# line 2037 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 422 then
# line 2038 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 416 then
# line 2039 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 431 then
# line 2040 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 400 then
# line 2041 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 432 then
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 77 then
# line 2235 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2236 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 199 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1286 "lib/parser/lexer.rl"
		begin
 @act = 39;		end
	when 186 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 40;		end
	when 182 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1294 "lib/parser/lexer.rl"
		begin
 @act = 41;		end
	when 26 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1456 "lib/parser/lexer.rl"
		begin
 @act = 67;		end
	when 232 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1469 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1506 "lib/parser/lexer.rl"
		begin
 @act = 73;		end
	when 225 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1511 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 252 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1543 "lib/parser/lexer.rl"
		begin
 @act = 80;		end
	when 45 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1556 "lib/parser/lexer.rl"
		begin
 @act = 81;		end
	when 273 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1608 "lib/parser/lexer.rl"
		begin
 @act = 88;		end
	when 262 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1612 "lib/parser/lexer.rl"
		begin
 @act = 89;		end
	when 276 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1811 "lib/parser/lexer.rl"
		begin
 @act = 111;		end
	when 344 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1817 "lib/parser/lexer.rl"
		begin
 @act = 112;		end
	when 343 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1823 "lib/parser/lexer.rl"
		begin
 @act = 113;		end
	when 58 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @act = 115;		end
	when 274 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1227 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 277 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1890 "lib/parser/lexer.rl"
		begin
 @act = 119;		end
	when 447 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1954 "lib/parser/lexer.rl"
		begin
 @act = 132;		end
	when 442 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1979 "lib/parser/lexer.rl"
		begin
 @act = 133;		end
	when 450 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1989 "lib/parser/lexer.rl"
		begin
 @act = 135;		end
	when 443 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1994 "lib/parser/lexer.rl"
		begin
 @act = 136;		end
	when 444 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1999 "lib/parser/lexer.rl"
		begin
 @act = 137;		end
	when 449 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2004 "lib/parser/lexer.rl"
		begin
 @act = 138;		end
	when 441 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2015 "lib/parser/lexer.rl"
		begin
 @act = 139;		end
	when 436 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2029 "lib/parser/lexer.rl"
		begin
 @act = 140;		end
	when 372 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @act = 141;		end
	when 402 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2087 "lib/parser/lexer.rl"
		begin
 @act = 144;		end
	when 65 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2102 "lib/parser/lexer.rl"
		begin
 @act = 145;		end
	when 375 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2130 "lib/parser/lexer.rl"
		begin
 @act = 147;		end
	when 367 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1227 "lib/parser/lexer.rl"
		begin
 @act = 151;		end
	when 377 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2152 "lib/parser/lexer.rl"
		begin
 @act = 152;		end
	when 156 then
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 894 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, ''.freeze)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, ''.freeze)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 106 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 132 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 328 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 111 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 137 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 333 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 110 then
# line 704 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 136 then
# line 704 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 332 then
# line 704 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 108 then
# line 709 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 134 then
# line 709 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 330 then
# line 709 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 710 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 130 then
# line 710 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 326 then
# line 710 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 114 then
# line 740 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 751 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 140 then
# line 740 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 751 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 336 then
# line 740 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 751 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 98 then
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 777 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 125 then
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 777 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 321 then
# line 783 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 777 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 69 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 192 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1327 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 207 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1345 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 219 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1377 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 241 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1514 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 805
		_goto_level = _again
		next
	end
  end
		end
	when 256 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1593 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 268 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1614 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 292 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 354 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 364 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1929 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 384 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 85 then
# line 1139 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2264 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 427 then
# line 2040 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 397 then
# line 2041 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 409 then
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 404 then
# line 2099 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 642 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 401 then
# line 2100 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 642 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2102 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 247 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 503 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1511 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 35 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1506 "lib/parser/lexer.rl"
		begin
 @act = 73;		end
	when 46 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1556 "lib/parser/lexer.rl"
		begin
 @act = 81;		end
	when 72 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1142 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1983 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 37 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1468 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1469 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 347 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1816 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @act = 115;		end
	when 346 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1816 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1227 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 428 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2040 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @act = 141;		end
	when 109 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 135 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 331 then
# line 683 "lib/parser/lexer.rl"
		begin

    codepoint = @source_pts[p - 1]
    if (@escape = ESCAPES[codepoint]).nil?
      @escape = encode_escape(@source_buffer.slice(p - 1))
    end
  		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 710 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 133 then
# line 710 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 856 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source_buffer.slice(@escape_s).chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub("\\\n".freeze, ''.freeze), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 329 then
# line 710 "lib/parser/lexer.rl"
		begin
 @escape = @source_buffer.slice(p - 1).chr 		end
# line 694 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 698 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1745 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          if defined?(Encoding)
            emit(:tINTEGER, value.dup.force_encoding(Encoding::BINARY)[0].ord)
          else
            emit(:tINTEGER, value[0].ord)
          end
        else
          emit(:tCHARACTER, value)
        end

         @cs = 805; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 423 then
# line 2036 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 417 then
# line 2037 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 420 then
# line 2038 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 414 then
# line 2039 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 426 then
# line 2040 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 396 then
# line 2041 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2043 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'.freeze
          diagnostic :error, :trailing_in_number, { :character => '_'.freeze },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = '0'.freeze
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base), @ts, @num_suffix_s)
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 823 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1468 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1469 "lib/parser/lexer.rl"
		begin
 @act = 68;		end
	when 433 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 429 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2040 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 399 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2041 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2042 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 636 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2075 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
# line 22371 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 79 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 22381 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 282 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error'.freeze, range(p - 1, p) ] ]
    else
      eof = @source_pts.size
      [ false, [ '$eof'.freeze,   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  if defined?(Encoding)
    def encode_escape(ord)
      ord.chr.force_encoding(@source_buffer.source.encoding)
    end
  else
    def encode_escape(ord)
      ord.chr
    end
  end

  def tok(s = @ts, e = @te)
    @source_buffer.slice(s...e)
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND, 'do'.freeze)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK, 'do'.freeze)
    else
      emit(:kDO, 'do'.freeze)
    end
  end

  def arg_or_cmdarg
    if @command_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)

    if new_literal.words? && new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_backslash_delimited_words
      else
        self.class.lex_en_plain_backslash_delimited_words
      end
    elsif new_literal.words? && !new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif !new_literal.words? && new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if new_literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,

    'pokud'     => :kIF_MOD,
    'kdyz'      => :kIF_MOD,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,

    'pokud'     => :kIF,
    'kdyz'      => :kIF,    
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__
     ).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  KEYWORDS_BEGIN['konec']  = KEYWORDS['konec' ] = :"kEND"
  KEYWORDS_BEGIN['jinak']  = KEYWORDS['jinak' ] = :"kELSE"
  KEYWORDS_BEGIN['prikaz'] = KEYWORDS['prikaz'] = :"kDEF"  

  
# line 2279 "lib/parser/lexer.rl"

  # %
end
